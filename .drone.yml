---
kind: pipeline
type: docker
name: default

clone:
  depth: 150

steps:
  # Build and push build container on master
  - name: docker-build-push-build
    image: plugins/docker
    settings:
      username: git-robot
      password:
        from_secret: git_robot_password
      repo: git.fsfe.org/fsfe/fsfe-website-build
      registry: git.fsfe.org/fsfe/fsfe-website-build
      tags: latest
      cache_from: git.fsfe.org/fsfe/fsfe-website-build:latest
      dockerfile: build.Dockerfile
    when:
      branch:
        - master
      event:
        - push

  # Build and push pre-commit container on master
  - name: docker-build-push-pre-commit
    image: plugins/docker
    settings:
      username: git-robot
      password:
        from_secret: git_robot_password
      repo: git.fsfe.org/fsfe/fsfe-website-pre-commit
      registry: git.fsfe.org/fsfe/fsfe-website-pre-commit
      tags: latest
      cache_from: git.fsfe.org/fsfe/fsfe-website-pre-commit:latest
      dockerfile: pre-commit.Dockerfile
    when:
      branch:
        - master
      event:
        - push

  # Build but do not push build container on PR
  - name: docker-build-pr-build
    image: plugins/docker
    settings:
      username: git-robot
      password:
        from_secret: git_robot_password
      repo: git.fsfe.org/fsfe/fsfe-website-build
      registry: git.fsfe.org/fsfe/fsfe-website-build
      tags: latest
      cache_from: git.fsfe.org/fsfe/fsfe-website-build:latest
      dockerfile: build.Dockerfile
      dry_run: true
    when:
      event:
        - pull_request

  # Build but do not push pre-commit container on PR
  - name: docker-build-pr-pre-commit
    image: plugins/docker
    settings:
      username: git-robot
      password:
        from_secret: git_robot_password
      repo: git.fsfe.org/fsfe/fsfe-website-pre-commit
      registry: git.fsfe.org/fsfe/fsfe-website-pre-commit
      tags: latest
      cache_from: git.fsfe.org/fsfe/fsfe-website-pre-commit:latest
      dockerfile: pre-commit.Dockerfile
      dry_run: true
    when:
      event:
        - pull_request

  - name: pre-commit
    image: docker:27.4.1
    environment:
      # Environment variables necessary for rootless Docker
      XDG_RUNTIME_DIR: "/run/user/1001"
      DOCKER_HOST: "unix:///run/user/1001/docker.sock"
    volumes:
      # Mounting Docker socket of rootless docker user
      - name: dockersock
        path: /run/user/1001/docker.sock
    commands:
      - export FSFE_WEBSITE_HOST_SOURCE_CODE=$(docker container inspect "$HOSTNAME" --format '{{ range .Mounts }}{{ if eq .Destination "/drone/src" }}{{ .Source }}{{ end }}{{ end }}')
      - docker ps && echo "tampered with"
      - echo "DRONE_COMMIT_BRANCH ${DRONE_COMMIT_BRANCH}"
      - docker compose -p fsfe-website-pre-commit run --remove-orphans --build pre-commit "origin/${DRONE_COMMIT_BRANCH}"

  - name: push-to-docs
    image: git.fsfe.org/fsfe-system-hackers/docs-centralizer:latest
    environment:
      REPO_OWNER: FSFE
      REPO_NAME: fsfe-website
      SSH_PRIVATE_KEY:
        from_secret: docs_bot_private_key
    when:
      branch:
        - master
      event:
        - push
        - tag
        - deployment

  - name: deploy-master
    image: docker:27.4.1
    environment:
      # Environment variables necessary for rootless Docker
      XDG_RUNTIME_DIR: "/run/user/1001"
      DOCKER_HOST: "unix:///run/user/1001/docker.sock"
      # Target use ipv4 proxies for noddack and gahn, as ipv6 broken.
      TARGET: "www@proxy.noris.fsfeurope.org:fsfe.org/global/?10322,www@proxy.plutex.fsfeurope.org:fsfe.org/global/?10322"
      FSFE_WEBSITE_KEY_PRIVATE:
        from_secret: KEY_PRIVATE
      FSFE_WEBSITE_KEY_PASSWORD:
        from_secret: KEY_PASSWORD
      FSFE_WEBSITE_GIT_TOKEN:
        from_secret: BUILD_TOKEN
      PROJECT: fsfe-website-master
    volumes:
      # Mounting Docker socket of rootless docker user
      - name: dockersock
        path: /run/user/1001/docker.sock
    commands:
      - export FSFE_WEBSITE_HOST_SOURCE_CODE=$(docker container inspect "$HOSTNAME" --format '{{ range .Mounts }}{{ if eq .Destination "/drone/src" }}{{ .Source }}{{ end }}{{ end }}')
      - docker ps && echo "tampered with"
      - docker compose -p "$PROJECT" down
      # If we are in a cron job, then do a full rebuild
      # Ideally the cron would set the flag itself, but drone does not support that.
      - if [ "$DRONE_BUILD_EVENT" = "cron" ]; then EXTRA_FLAGS="--full"; fi
      - docker compose -p "$PROJECT" run --remove-orphans --build build --target "$TARGET" $EXTRA_FLAGS
    when:
      branch:
        - master
      event:
        exclude:
          - pull_request

  - name: deploy-test
    image: docker:27.4.1
    environment:
      # Environment variables necessary for rootless Docker
      XDG_RUNTIME_DIR: "/run/user/1001"
      DOCKER_HOST: "unix:///run/user/1001/docker.sock"
      # Target use ipv4 proxies for noddack and gahn, as ipv6 broken.
      TARGET: "www@proxy.noris.fsfeurope.org:test.fsfe.org/global/?10322,www@proxy.plutex.fsfeurope.org:test.fsfe.org/global/?10322"
      FSFE_WEBSITE_KEY_PRIVATE:
        from_secret: KEY_PRIVATE
      FSFE_WEBSITE_KEY_PASSWORD:
        from_secret: KEY_PASSWORD
      FSFE_WEBSITE_GIT_TOKEN:
        from_secret: BUILD_TOKEN
      PROJECT: fsfe-website-test
    volumes:
      # Mounting Docker socket of rootless docker user
      - name: dockersock
        path: /run/user/1001/docker.sock
    commands:
      - export FSFE_WEBSITE_HOST_SOURCE_CODE=$(docker container inspect "$HOSTNAME" --format '{{ range .Mounts }}{{ if eq .Destination "/drone/src" }}{{ .Source }}{{ end }}{{ end }}')
      - docker ps && echo "tampered with"
      - docker compose -p "$PROJECT" down
      # If we are in a cron job, then do a full rebuild
      # Ideally the cron would set the flag itself, but drone does not support that.
      - if [ "$DRONE_BUILD_EVENT" = "cron" ]; then EXTRA_FLAGS="--full"; fi
      - docker compose -p "$PROJECT" run --remove-orphans --build build --target "$TARGET" $EXTRA_FLAGS
    when:
      branch:
        - test
      event:
        exclude:
          - pull_request
trigger:
  branch:
    - master
    - test
  event:
    - cron
    - custom
    - pull_request
    - push

node:
  cont2: noris

volumes:
  # Define Docker socket of rootless docker user
  - name: dockersock
    host:
      path: /run/user/1001/docker.sock
---
kind: signature
hmac: 25f45a057596782206dca10db43afd17972a5b42c799f242afcff9ae516808d5
