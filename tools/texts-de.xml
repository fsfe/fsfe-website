<?xml version="1.0" encoding="ISO-8859-1"?>

<textset>
  <text id="copyright">Copyright (C) FSF Europe.</text>
  <text id="lastchanged"> Letzte Änderung: </text>
  <text id="translator1">Wir danken </text>
  <text id="translator2"> für diese inoffizielle Übersetzung. Der </text>
  <text id="translator3">Originaltext</text>
  <text id="translator4"> ist die offizielle Version.</text>
  <text id="permission">
    Die unveränderte Wiedergabe und Verteilung dieses 
    gesamten Textes in beliebiger Form ist gestattet, sofern 
    dieser Hinweis erhalten bleibt.
  </text>
  <text id="webmaster">
    Bitte melden Sie Probleme mit dieser Seite an
    <i>webmaster at fsfeurope.org</i>.
  </text>
  <text id="focus">Region</text>
  <text id="find">Suche</text>
  <text id="select">Region</text>
  <text id="selectgo">Auswählen</text>
  <text id="outdated">
     <p><strong>Achtung: </strong>
        Diese Seite ist eine Übersetzung, deren Original sich seit der
	Übersetzung geändert hat. Sie sehen also möglicherweise
	eine ältere Version. Bitte informieren Sie sich <a href="/help/help.html">hier</a> 
        darüber, wie Sie uns bei Übersetzungen und anderen Dingen
        unterstützen können.
     </p>
  </text>
  <text id="notranslation">
     <p><strong>Achtung: </strong>
        Von dieser Seite existiert noch keine Übersetzung. Im Moment
        sehen Sie die originale Version dieser Seite. Bitte informieren Sie
	sich <a href="/help/help.html">hier</a>, um zu sehen, wie Sie uns
        bei Übersetzungen und anderen Dingen unterstützen können.
     </p>
  </text>
  <text id="menu/about">Über Uns</text>
  <text id="menu/projects">Projekte</text>
  <text id="menu/projects/technical">Technische</text>
  <text id="menu/projects/other">Andere</text>
  <text id="menu/projects/legal">Juristische</text>
  <text id="menu/projects/community">Gesellschaftliche</text>
  <text id="menu/documents">Dokumente</text>
  <text id="menu/events">Veranstaltungen</text>
  <text id="menu/help">Aktiv werden</text>
  <text id="menu/help/1-fellow">als fellow</text>
  <text id="menu/help/2-translator">als übersetzer</text>
  <text id="menu/help/3-webmaster">als webmaster</text>
  <text id="menu/help/4-booth_volunteer">als standfreiwillige</text>
  <text id="menu/help/5-intern">als praktikant</text>
  <text id="menu/donate">Spenden</text>
  <text id="menu/donate/cc">per Kreditkarte</text>
  <text id="menu/donate/other">andere Wege</text>
  <text id="menu/order">Bestellung</text>
  <text id="menu/contact">Kontakt</text>
  <text id="menu/associates">Assoziierte</text>
  <text id="menu/lists">Mailing Listen</text>
  <text id="menu/news">Meldungen</text>
  <text id="menu/press">Presse-Infos</text>
  <text id="menu/thankgnus">Thank GNUs</text>
</textset>
 be nice to be able to specify this, but it will break things as
# they are now. This is on the TODO list :-)

$opts{i} = ".";

$| = 1;

# Create XML and XSLT parser contexts. Also create the root note for the
# above mentioned XML file (used to feed the XSL transformation).

my $parser = XML::LibXML->new();
my $xslt_parser = XML::LibXSLT->new();

# Parse the global stylesheet

my $global_style_doc = $parser->parse_file($opts{i}."/fsfe-new.xsl");
my $global_stylesheet = $xslt_parser->parse_stylesheet($global_style_doc);

#
# First topic of today: create all directories we need. Instead of creating
# these as they are used, we create them in a batch at the beginning of each
# run, so we won't have to worry about them later.
# Note though that this also REMOVES the previous paths. You don't want to
# build directly into the production web tree.
#
my @dirs = File::Find::Rule->directory()
                           ->in($opts{i});

while (my ($path, undef) = each %countries) {
  print STDERR "Reseting path for $path\n" unless $opts{q};
  rmtree($opts{o}.'/'.$path) unless ($opts{u} || $opts{n});
  my @paths = map { $opts{o}."/$path/".$_ } grep(!/^\.\.?$/, @dirs);
  foreach (@paths) {
    print "Creating $_\n" if $opts{d};
    mkpath($_) unless $opts{n};
  }
}

#
# Here starts our real work. First we get ourselves a list of all files
# that we need to worry about and then single out the XHTML files. We
# create a hash of hashes, %bases, which contains the basename of each
# file, together with the translations that it exists in.
#
my @files = File::Find::Rule->file()
                            ->in(