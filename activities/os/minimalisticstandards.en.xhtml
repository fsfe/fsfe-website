<?xml version="1.0" encoding="UTF-8" ?>

<html>
  <head>
    <title>Minimalistic Data Format – Open Standards – FSFE</title>
  </head>
  <body id="article">
    <p id="category">
      <a href="/activities/os/os.html">Open Standards</a>
    </p>
    <h1>The minimal principle, 
	because being an open standard is not enough.</h1>

    <p>A tool is useless without a piece of wood to work on. 
    What are the workpieces we shape with our computer?
    Data, information, knowledge, opinions, art – in short: Content. It is being 
    created, processed and transmitted, often in an electronic format. 
    The number of people owing devives connecting to the internet is constantly
    rising. And they use it to evolutionise their ways of working together.
    </p>

    <p>So content is send from one user to another and back. For this it needs to take
    on some form: The data-format, which defines how content and its wrapping is handled, 
    what is allowed and how each bit looks within a file or stream. Whoever wants 
    to participate in the exchange must use a software application that understands the
    data-format in question. Otherwise the content would appear like an unkonwn 
    foreign language your computer. If a data-format doesn’t allow to include pictures, 
    then there is no way to save pictures with it.
    The choice of data-format dictates how long I may access the content 
    and what I am able do with it.
    </p>

    <p>When saving a file in a particular data-format, 
    a single user probably will not feel any effect of her decision. 
    When an IT-department or a public administration decides for a data-format 
    the impact is far greater: It will dominate their choice of software 
    for several years, even decades. The more an organisation saves precious 
    writings, recordings or pictures in an electronic way, the more important 
    it becomes to secure continued access to the documents.
    Conciously or indirectly these decisions fund the initial development
    and maintenance of data-formats.
    Many software producers intentionally try to influence users to 
    use one of the data-formats the vendor controls. For example for technical schematics of 
    vehicles, buildings or machinery. Later the producer of the CAD application in question
    basically can hold the data for ransom. From the vendor’s point of view 
    this is a strong position 
    in the upcoming negotiation about the price of the next software revision.
    Even some countries ended up being on the losing end of this situation.
    </p>

    <p>Therefore a good data-format can only be an <a
      href="/activities/os/def.html">Open Standard</a>.
    This requirement however is not enough. The data-format needs to solve a problem
    adequately: It needs to be a good fit from a functional as well 
    as from a technical point of view. In order to judge this, there are a number
    of aspects. The <a
      href="http://jendryschik.de/wsdev/trans/designguide/">Essay by Bert
      Bos</a> explains the design principles of the W3C - the organisation which develops the formats 
    of the world wide web. He mentions efficiency, maintainability, accessibility, 
    extensibility, learnability, simplicity, durability and a few more.</p>

    <p>The two central questions are:</p><ul>
      <li>How well does the data-format solve the problem? And:</li>
      <li>Is it the most simple data-format available or is there even a more simple one?</li></ul>


    <p>The first question is self-explanatory: Whoever wants to save, transmit and search within 
    a text would not want a format for pixel based images – though it is inevitable
    using such a format during the first step of scanning papers or 
    when processing facsimiles.</p>

    <p>The second question is much more interesting: Is the format as simple as possible and as 
    complicated as necessary? It is very hard to design or choose a data-format 
    which correspondents to this principle of minimalism.</p>

    <p>First there is the bad influence of a patter called <a
      href="http://sourcemaking.com/antipatterns/design-by-committee">“Design
      by Committee”</a>, which stands for the 
      participation of several decision makers for a technical question. Often many people 
      are involved on the development of a standard. Decisions about what software product 
      to use within an organisation – especially in public ones – are also often made by large committees. 
      It easily happens that too many cooks spoil the broth and add more than 
      actually necessary. The W3C at least <a
      href="http://www.w3.org/People/Bos/DesignGuide/committee.html">
      is aware of this pattern, says Bos</a>. Many groups are not.</p>


    <p>In addition checklists are commonly used when evaluating software solutions. Typically
    is goes like this: Everyone can add something to the list. And the wishes are specific ideas 
    for a solution. Afterwards they are compiled into a list which then makes up 
    all the necessary requirements. The software solution promissing most items wins. 
    Most of the time this leads buying into a single data-format which has 
    many unneeded features. It would be better if wishes were being added 
    in a problem orientated manner. Higher grades should be given for solutions which 
    work with a number of simple, easy extensible and orthagonal data-formats 
    that can be combined for the more complex needs.</p>

    <p>But software vendors know their customers. The more features on the checklist are ticked 
    the more precious a software appears. That is because it can – on a quick glimpse – 
    serve many needs. Except the need for simple elegance. And that is why the software and the data-format 
    often ends up looking: Bloated with many features, each directly corresponding to one of the 
    proposed technical solution idea. This give the software producer another edge:
    Any competitor will have a hard time to process the complete format or to offer a superior alternative 
    complete solution. The customer is forced to buy all or nothing. Why another data-format 
    when there is one that can do everything?</p>

MARK

    <p>Every additional feature or guideline complicates the description of the data-format 
    exponentially. The disadvantages are immane. The developers of a software 
    that needs to handle a data-format need to understand the description fully. This includes 
    the whole text as well as all possible combinations of the contained elements. To read less 
    and understand more leads to a more easy and secure software. This leads to more software 
    packages that can handle this data-format on a high level. What follows is more competition, 
    choice and therefore more user for this format.</p>

    <p>The more tricky a data-format is, the greater the chance there are 
    rarely needed features. This format and the implementation are comparable to a 
    huge and angled house. Some rooms are very populated others are virtually never entered. 
    Of course such a house is hard to secure. Burglars could open a long forgotten window to 
    the basement or while walking through the hallway hide something in a dark staircase.</p>

    <p>Experts see complexity as the greatest problem for software security. Because of this 
    many are critical or even hostile towards standards. 
    <a class="fn" id="ref-complexity" href="#fn-complexity">1</a></p>

    <p>To grasp the risks just take a look at how a computer renders fonts: There is the very 
    commonly used standard ISO/IEC 8859-15 (Latin-9). More than 20, mostly western European 
    languages could be processed with it. For a single character there are 256 different possibilities.
    A new standard namely Unicode (ISO 10646) is supposed to encode all languages. It needs many 
    more – more than one million – possibilities. In addition a character could be coded with 
    two different ways. For example with UTF-8 or UCS-2. On one side Unicode is a blessing:
    Programmed correctly once an application is prepared to feature hundreds of languages. On 
    the other hand a programmer can’t possibly predict what could happen with all the characters 
    in the source code. With the 256 cases with Latin-9 she could. With Unicode this overview 
    is missing. A feisty attacker might find combinations the developer didn’t think of. This 
    happens on a regular basis. Here are two examples: 1. (DE)<a
      href="http://de.wikipedia.org/wiki/Homographischer_Angriff">Der
      homographische Angriff</a> / (EN)<a href="http://en.wikipedia.org/wiki/IDN_homograph_attack">
      the homograph attack</a> 
    frauds the user with similar looking Internet addresses. Cyrillic from the Unicode-Fonts is 
    suitable for this. 2. The developers of a well known webserver have been <a
      href="https://www.bsi.bund.de/ContentBSI/grundschutz/kataloge/m/m05/m05102.html">pwned by URIs in 
    Unicode</a>.</p>


    <p>It is to no surprise that there are more applications out there that can handle Latin-9 
    more correctly than Unicode. The problem is identical with every “thicker” specified data-format: 
    There are applications that don’t understand the exotic features. Especially because there 
    are so many features so it is impossible to test. The adverts say the software can read the 
    data-format “X” but whether this works in practice is questionable.</p>

    <p>Some data-formats use this problem on purpose: There are different versions. Who likes to 
    certainty of all applications are compatible needs to express exactly which version. 
    For example there are three (1.0, 1.1 and 1.2) variants from the Open Document Format (ODF). 
    Probably with increasing complexity. Are probably many uses in which version 1.0 is 
    sufficient. But the preset would probably be the newest version the application supports. 
    For PDF this problem is even more significant. Some <a
      href="http://pdfreaders.org/os.de.html">versions or parts of a PDF</a> doesn’t even 
    suffice as an open standard.</p>

    <p>Who likes to understand computers is being told that there are two different things: 
    Data and programmes. While data is merely processed the programmes contain commands for 
    the computer. The difference is clarified with a sticky note saying: Jump from a bridge! 
    I can read this note, write it and pass it on (process) without any problems. But if I 
    regard it as a command and execute it then I probably will land on my nose. With computers 
    it’s the same. Data-formats like ODF, Doc an PDF may contain data and commands for automatic 
    procession (“Macros”) or interactive elements (Javascript). This turns a regular file into 
    a potential application with commands for your computer. Naturally attackers try to take 
    advantage of this. Like with the (DE)<a
      href="https://www.bsi-fuer-buerger.de/ContentBSIFB/GefahrenImNetz/Schadprogramme/Viren/viren.html">Macro-Viruses</a> / (EN)<a href="http://en.wikipedia.org/wiki/Macro_virus">Macro-Viruses</a>.</p>

    <p>Most texts which are transmitted only need a small fraction of that what common 
    data-formats have to offer on formatting, mark-up or layout. Since decades a simple file 
    composed of Latin-9 characters can be edited on every computer with a simple text editor 
    and all word processors. With increasing demands a small part of HTML 2 could suffice for 
    headlines, lists and links. Or a (DE)<a
      href="http://de.wikipedia.org/wiki/Creole_(Markup)">simple</a> / (EN)<a href="http://en.wikipedia.org/wiki/Creole_%28markup%29">
      simple textbased markup</a>, as it is used in Wikis. Wikipedias and Weblogs of the world 
    proof that lots of content can be expressed with these simple means.</p>

    <p>All –  except manufacturers of proprietary software – are interested in competing 
    software and secure products which are interoperable. The minimal rule for data-formats 
    facilitates all this. It’s meaning is to leave away everything that is not necessarily 
    needed. The aim is a (DE)<a
      href="http://magplot.de/TasteForMakers">simple and elegant design</a> / (EN)<a href="http://www.paulgraham.com/taste.html">
      simple and elegant design</a>. A nice solution is a kit with which infinite works may 
    be created with just a few elements.</p>

    <p>Even though there are good reasons to choose a data-format which covers several 
    requirements we should ask ourselves: “Can’t we do that simpler?”</p>

    <h2 id="fn">Footnotes</h2>
    <ol>
      <li id="fn-complexity">"Complexity is the main enemy of security",
    Ferguson, Niels, and Schneier, Bruce - Practical Cryptography, Wiley, 2003,
    ISBN 0-471-22357-3. p146 "9.4.1 Simplicity", pp365- "23 Standards"
    <a href="http://www.macfergus.com/pc">http://www.macfergus.com/pc</a>  [<a href="#ref-complexity">&#8626;</a>]</li>
  </ol>

  </body>

  <timestamp>$Date$ $Author$</timestamp>
<tags>
<tag>open-standards</tag>
</tags>
<legal type="cc-license">
 <license>https://creativecommons.org/licenses/by-sa/3.0/</license><notice>Neben der Standardlizenz der Webseite steht dieser Artikel unter der Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)</notice>
</legal>
<author id="reiter" />
<!-- <date>
  <original content="2012-03-23" />
</date> -->
<translator>Philipp Kammerer</translator>
</html>
