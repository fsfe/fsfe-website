<?xml version="1.0" encoding="utf-8"?>
<html>
  <version>1</version>

  <head>
    <title>On the Sustainability of Free Software</title>
  </head>

  <body class="toplevel freesoftware">

    <h1>On the Sustainability of Free Software</h1>
    <div id="introduction">
      <p>
      This study analyses and discusses several aspects regarding the sustainability of Free Software. It is part of a series about the <a href="/freesoftware/">basics of Free Software</a>.
      </p>

    </div>


    <h2 id="summary" class="painted">Summary</h2>

    <p><strong>
           A definition of software sustainability is introduced and its characteristics. It is shown how the inherent characteristics of Free Software are sustainable as well as their impact on IT infrastructures. Software obsolescence is explained and the possibilities of using Free Software to save natural resources by extending hardware usage lifetime and through energy consumption savings. Finally, four politically necessary directives for a more sustainable digital society are outlined.
    </strong>
    </p>


  <div class="toc">
    <p>Table of contents</p>
    <ol>
      <li><a href="#examining-the-sustainability-of-free-software">Software</a>
        <ol>
          <li><a href="#software-as-a-resource-of-modern-societies">Software as a resource of modern societies</a></li>
          <li><a href="#about-the-sustainability-of-free-software">About the sustainability of Free Software</a></li>
          <li><a href="#designing-a-resource-free-licenses-and-copyleft">Designing a resource: Free licences and copyleft</a></li>
          <li><a href="#conservation-and-loss-of-resources-a-question-of-reproducibility">Conservation and loss of resources: a question of reproducibility</a></li>
          <li><a href="#sustainable-use-of-the-resource-brainpower">Sustainable use of the resource brainpower</a></li>
        </ol>
      </li>
      <li><a href="#free-software-and-it-infrastructures">Free Software and IT infrastructures</a>
        <ol>
          <li><a href="#free-software-is-the-base-for-sustainable-it-infrastructures">The impact of Free Software on the sustainability of IT infrastructures</a></li>
          <li><a href="#free-software-enables-sustainable-ecosystems">Free Software enables sustainable ecosystems</a></li>
        </ol>
      </li>
      <li><a href="#free-software-sustainability-and-the-use-of-natural-resources">Free Software, sustainability and the use of natural resources</a>
        <ol>
          <li><a href="#hardware-production-and-usage-times">Extending usage times</a></li>
          <li><a href="#energy-consumption">Reducing energy consumption</a>
            <ol>
              <li><a href="#autonomy-of-use">Autonomy of use</a></li>
              <li><a href="#uninstallability-and-modularity">Uninstallability and modularity</a></li>
              <li><a href="#reusability">Reusability</a></li>
            </ol>
          </li>
        </ol>
      </li>
      <li><a href="#what-can-politics-and-society-do-for-a-more-sustainable-digitization">What can politics and society do for a more sustainable digitization?</a>
        <ul>
          <li><strong>General Purpose Computers:</strong> <a href="#general-purpose-computers">Right to use alternative operating systems and software</a></li>
          <li><strong>Access to Hardware:</strong> <a href="#access-to-hardware">Devices with open interfaces, drivers, and standards</a></li>
          <li><strong>Freedom of Choice:</strong> <a href="#freedom-of-choice">Gatekeepers must allow competing services and software</a></li>
          <li><strong>Upcycling of Software:</strong> <a href="#upcycling-of-software">Publication of source code under a free licence after the end of support</a></li>
          <li><strong>Public Smart Infrastructures:</strong> <a href="#public-infrastructure-public-code">Public infrastructure to be set up with Free Software and public code</a></li>
        </ul>
      </li>
      <li><a href="#initiatives-around-the-sustainability-of-free-software">Initiatives around the sustainability of Free Software</a></li>
    </ol>
  </div>



  <h2 id="from-free-software-to-sustainable-software">From Free Software to Sustainable Software</h2>


  <p>Free Software (also known as Open Source Software) is any software that grants any user the four freedoms to use, study, share and improve the software<a class="fn" href="#fn1">1</a>. These <em>“four freedoms”</em> are given by a software licence<a class="fn" href="#fn2">2</a>. Software licences define the conditions under which a programme can be used and reused. For it to be Free Software, the licence text must contain at least the full exertions of the aforementioned four freedoms to any user without limitations. Read more about the understanding of <a href="/freesoftware/">What is Free Software</a> and how these four freedoms help support other fundamental rights like freedom of speech, freedom of press and privacy on the <a href="/index.html">Free Software Foundation Europe’s webpages</a>.</p>




  <p>In contrast to Free Software however, sustainable software is still in need of a precise definition. This short study is intended to help with the understanding of sustainable software and sheds light on how the four freedoms of Free Software support the sustainability of and by software.</p>

<!--
  <p>The study is separated into four chapters. In chapter one (<a href="#examining-the-sustainability-of-free-software">1</a>), the most important aspects covering the preservation of software as a resource for modern societies are examined the sustainability of Software is defined by using the United Nation’s definition of “sustainability”. In the second chapter (<a href="#free-software-and-it-infrastructures">2</a>) the previous findings are applied to discuss the sustainability of IT-infrastructures and Free Software ecosystems. In the third chapter (<a href="#free-software-sustainability-and-the-use-of-natural-resources">3</a>) the impact Free Software can have on reducing our consumption of natural resources is examined, in particular the possibilities of Free Software to overcome the dilemma of software obsolescence and other means. In chapter four (<a href="#what-can-politics-and-society-do-for-a-more-sustainable-digitization">4</a>) concrete policy recommendations are given that help to foster a sustainable use of our IT infrastructure and in the final chapter five (<a href="#initiatives-around-the-sustainability-of-free-software">5</a>) we conclude with some suggestions for further readings and other initiatives in the field of digital sustainability. </p>

-->

  <h3 id="examining-the-sustainability-of-free-software">(1) Examining the Sustainability of (Free) Software</h3>

    <p>
    What is sustainability? What characterizes the sustainable consumption of a resource? And what specifically applies to a sustainable consumption of the resource software? In this chapter we elaborate how software has become a resource of modern societies (<a href="#software-as-a-resource-of-modern-societies">1.1</a>) and how to preserve a contemporary software resource for the future (<a href="#about-the-sustainability-of-free-software">1.2</a>). We briefly examine the influence of different licence models (<a href="#designing-a-resource-free-licenses-and-copyleft">1.3</a>) to further elaborate on of the potential of saving the last copy of a resource (<a href="#conservation-and-loss-of-resources-a-question-of-reproducibility">1.4</a>) and the sustainable use of a resource called brainpower (<a href="#sustainable-use-of-the-resource-brainpower">1.5</a>).
  </p>


  <h3 id="software-as-a-resource-of-modern-societies">(1.1) Software as a resource of modern societies</h3>

    <p>
    Software has become an indispensable resource of modern societies. Whether industrial production, science, public administration, our media consumption or even our everyday communication: almost all areas are now permeated by software. A modern society without the use of software no longer seems conceivable. <strong>The existence of and access to software thus becomes a prerequisite for modern social organisation and functioning.</strong> But not only our social organization is based on software, so are our machines and our tools as well. <strong>Hardware needs software to function and vice versa.</strong> All machines and automated systems around us - whether at home, at work, or in public infrastructure - need software as an indispensable resource to do whatever they were designed to do.
  </p>

  <p>
    Both dependencies – the one on the functioning of our machines and the one on the functioning of our social organisation - together make software indispensable for modern, networked societies.
    </p>


    <h3 id="about-the-sustainability-of-free-software">(1.2) About the sustainability of Free Software</h3>


    <p>
    The moment we recognize software as a fundamental and indispensable resource of modern societies, there also arises the realization and urgency to develop or, if necessary, consume this resource in the most sustainable way possible. After all, the stability and resilience of our current social organisation depends on this resource. But what actually characterizes the sustainable consumption of a resource? And what specifically applies to sustainable consumption of the resource software?
    </p>

  <blockquote>"Sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs" </blockquote>

    <p>
    is an often quoted definition of sustainability from the famous UN-publication <em>"Our Common Future"</em><a class="fn" href="#fn3">3</a>. With regard to natural and limited resources, a form of renunciation can be derived from this definition: present generations should moderate their consumption and draw from limited resources only to the extent that there is still enough left for future generations.
    </p>

    <p>
    Software, however, is not a limited resource; <strong>software cannot be consumed in such a way that it would ever exhaust the basic quantity of the resource.</strong> If we want to preserve today's software as a resource for future generations, it is actually not necessary to practice renunciation; contrary approaches might be helpful instead.
    </p>

    <h4>Resource Software</h4>

    <p>
    The “resource software” is initially unlimited: software can be installed, copied and used as often as wished without ever reducing the quantity or quality of the resource. In fact, regarding the amount of the resource, the opposite applies: If we consider a certain software, e.g. the “operating system X”, as a resource and one installation of this operating system X as amount 1 of this resource, then the overall amount of the “resource operating system X” is increased with each subsequent installation. With the second installation of the operating system X we have the basic set 2 of this software, with the third installation the basic set 3 and so on. <strong>Each further installation, each copy and each use of a specific software increases the basic set of the resource instead of decimating it.</strong> That means that instead of practicing doing without, as is the case with finite resources, a possible strategy for preserving a contemporary software resource for the future would be to use it as widely as possible – meaning to install it as frequently as possible. This is because the higher the basic set of a resource, the lower the risk of losing or exhausting the resource - so the simple conclusion<a class="fn" href="#fn4">4</a>. This method however is in contradiction to certain aspects of the sustainable use of hardware and energy consumption (as elaborated in chapter 3), and so a more promising method to sustain software seems the complete archiving of the resource as discussed later in this chapter (1.5). </p>

  <p>
    Still, in this simple paradigm we already see a fundamental characteristic regarding the sustainability of Free Software: <strong>Free Software can be copied, shared and reused as often as desired.</strong>
    </p>

    <p>
    In contrast, this is by no means possible with proprietary software because the originally unlimited resource software artificially runs short in proprietary business models with the use of technical measures and enforced by legal regulations and policies. Such technical measures are, for example, copy limitation measurements or other forms of digital restriction management<a class="fn" href="#fn5">5</a>, usually directly implemented by their authors.  These technical measures are often accompanied and enforced by legal measures and other governmental regulations, usually intended to strengthen 20ths centuries ideas of intellectual limitation rights<a class="fn" href="#fn6">6</a> such as copyright and patent law<a class="fn" href="#fn7">7</a>.
    </p>

    <h4 id="intergenerational-equity">Intergenerational Equity</h4>

    <p>
    While proprietary software artificially tightens the resources that have become fundamentally important for the organization of our societies and withholds them from the general public and future generations, Free Software opens up and removes any artificial restrictions  to these resources. <strong>Free Software licences guarantee unrestricted access to the resource software not only for all people, but also unlimited in terms of space and time.</strong> Because of the resource’s availability in an infinite time span, we also speak of <em>“Intergenerational equity”</em> which aims at an equity between people who lived in the past, who live today and who will live in the future<a class="fn" href="#fn8">8</a>. It is precisely this intergenerational equity that has found its way into the core of the environmental sustainability debate since <em>“Our Common Future”</em> because – as already quoted – <em>“sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs"</em>.
    </p>


    <h3 id="designing-a-resource-free-licenses-and-copyleft">(1.3) Designing a resource: Free licences and copyleft</h3>

    <p>
      From previous considerations it becomes already clear that the amount of resources - i.e. by duplicating - of the software resource can be consciously designed. <strong>Proprietary software is designed to let the resource run short to artificially create a market around a limited resource. Free licences however allow the full potential of a resource to be realized and enable a sustainable distribution in the sense of intergenerational equity.</strong> The authorship of a software can thus decisively decide on the availability of the software resource by selecting and using a suitable licence.
    </p>

  <figure>
      <img src="https://pics.fsfe.org/uploads/big/081133c18029595190045053c0b28618.png"/>
        <figcaption>Software and other creative work is published following one of the three major concepts: copyleft, public domain and copyright</figcaption>
  </figure>
    <p>
      The world of free licences again is divided into different subgroups of licences, mainly into different copyleft licences and non-protective licences as well as publications in the “public domain”<a class="fn" href="#fn9">9</a>.
    </p>

    <p>
      All these distinct forms of free licences enable the publication of software using the above discussed maximum usage possibilities of the current resource in terms of its dissemination and preservation of the resource for the future. Non-protective licences as well publications within the public domain however allow any user of such a freely licensed software to later modify it into a limited resource and proprietary software. This means that with non-protective licences and the public domain, there is always the risk that further developments of the software will turn around and again artificially reduce the amount of software resources with the use of copyright, patent protection or other intellectual limitation rights. Leading to the corresponding software being withheld from both, current and future generations. Intergenerational equity will not anymore be achievable as a result. Meaning that <strong>only copyleft licences guarantee that future further developments of the software can be used just as sustainable. </strong>
    </p>


    <h3 id="conservation-and-loss-of-resources-a-question-of-reproducibility">(1.4) Conservation and loss of resources: a question of reproducibility</h3>

    <p>
      In <a href="#software-as-a-resource-of-modern-societies">chapter 1.1</a>, the widest possible distribution of software as a way of obtaining the same resource was carried out as one possible solution in a theoretical mind game. However, this approach seems very uncontrollable and unpredictable and more like a game of chance because what do all free distribution methods help if - in another theoretical mind game - in the end all users decide to delete this particular software? Also it seems unpractical since the widespread use of software might be indeed helpful for keeping it available for the future, but it is not absolutely necessary. <strong>In fact, for the sustainable consumption of software as a resource and its future availability, today's distribution or basic amount of the resource does not play a decisive role, but rather its timeless reproducibility.</strong> Because as long as at least the basic set 1 – including its unlimited reproducibility – is retained under a free licence – in the best case including its documentation, language, built-tools and corresponding hardware or emulators –, it is theoretically always possible for future generations to create and distribute any number of copies from this basic set at any time. <strong>For reproducibility, it is therefore particularly important to prevent the “loss of the last copy”. </strong>
    </p>

 <h4>Software Heritage</h4>

    <p>
      This is where <a href="https://www.softwareheritage.org/">"Software Heritage"</a> comes into play. And while it is not the only approach of archiving software resources, it is a very unique and complete example worth elaborating: Software Heritage is a non-profit supported by UNESCO, whose mission is “to collect, preserve, and share all software that is publicly available in source code form.”
    </p>

    <p>
      At Software Heritage, software source code is collected in multiple ways. One of them is by automatically crawling code hosting platforms, like GitHub or GitLab, but Software Heritage also allows and <a href="https://www.softwareheritage.org/howto-archive-and-reference-your-code/">offers simple means to save code from other public version control systems</a> manually. Both ways aim to offer curated archives that keep track of the origin of software by archiving and storing the full development history including precious and structured meta-information. Also they run <a href="https://www.softwareheritage.org/swhap/">The Software Heritage Acquisition Process</a> to save legacy code stored in various version and on different physical media from the time before the emergence of code hosting platforms.
    </p>

    <p>
      Consequently, the Software Heritage infrastructure itself is underlying a sustainable development model in that all the software developed in the process is being released as Free Software.
    </p>

    <h4>Loss of proprietary knowledge</h4>

    <p>
      As argued above, a decentralized free distribution and development model of software under a free licence and even more its complete archiving are promising methods to prevent the “loss of the last copy”. With proprietary software, on the other hand, the loss of the last copy is a real danger. The three most common ways of such a loss of software are
    </p>

    <ul>
      <li>deletion of the software or loss of the data carrier </li>
      <li>Loss of knowledge of the software and access to the source code </li>
      <li>the end of the provision of software or support, “planned obsolescence“</li>
    </ul>

    <p>
      The first case - the deletion of software or the loss of the data carrier - is a real danger, but ultimately only leads to the complete loss of a resource - for example the above-mentioned operating system X - if this copy is the very last copy of the resource. This case has become extremely rare in today's distributed and networked systems and should be noted here primarily for the sake of completeness. Also provided with the note that the unrestricted sharing possibilities of Free Software virtually encourage frequent copying and thus make the case of a last existing copy even more improbable.
    </p>

 <h4>Losing access to the sources</h4>

    <p>
      The second case in the list above <strong>- loss of knowledge of the software and access to the source code or the tools necessary to build the binaries from the source - is perhaps the most common and likely cause of permanent loss of software.</strong> Typically, it occurs  if the developing company behind proprietary software goes bankrupt and the software and its secret code and associated documentation that has been developed to date is not archived or published and without an orderly knowledge management system. In this way, software code that has been developed for years is often irretrievably lost because no one can read or understand the code anymore – not even the publisher since the publisher is not anymore existing. This also has an impact on any dependent software and infrastructures (compare <a href="#free-software-and-it-infrastructures">chapter 2</a>) and the failure or loss of knowledge about a single software component can undermine entire IT systems.
    </p>

    <p>
      Free Software, on the other hand, does not have this problem: <strong>once published under a free licence, the code is visible to everyone now and in future. And even the abrupt bankruptcy of a developing company behind it cannot lead to a complete loss of knowledge about the actual code.</strong> It is true that there might be a brief vacuum in which a software is not further developed by the original authorship. Still, any third party has the possibility to understand the code as well as to keep using it without further development or develop the software further at will. It should be noted, that it is not always economic or advisable for other reasons to further develop a software instead of (re-)writing it from scratch<a class="fn" href="#fn10">10</a>. Any such decision must be taken individually for each case but not releasing the code after bankruptcy for sure removes that possibility completely.
    </p>

 <h4 id="planned-obsolescence">Planned obsolescence</h4>

    <p>
      Finally, <strong>one of the most common cases is the third case from the list above: the end of the provision of software or the end of support for software.</strong> As a rule, such a linear business model is the basis of the market logic of proprietary software: the sale of new products should be promoted by devaluing current products<a class="fn" href="#fn11">11</a>. The software of a certain version (in the above example, the operating system X) is no longer supported, so that customers are forced to buy the next higher version.
    </p>

    <p>
      This approach is problematic in many ways: First of all, users are incapacitated and instead of giving them control over their technology, they are forced to buy new versions instead of continuing to use the existing one. Since not necessarily everyone follows this approach or cannot follow, there is a security problem for those affected and who do not update to the next higher version: Bugs might be found in the now-unmaintained versions of the software and can be used by third-parties to crack into the user’s system or application to steal information or let the application misbehave.
    </p>

    <p>
      On the other hand, the forced version upgrade can lead to the devaluation of hardware that is actually still functioning. This is the case when the next version can no longer be run on the old hardware. Ultimately, users are faced with a dilemma: Either they continue to use their current and functioning hardware, but have to live with a security risk by continuing to use the old software without any further security updates. Or they are forced to buy new hardware just to use the new software upgrade. <strong>This dilemma is known as "software obsolescence"</strong> (compare also <a href="/freesoftware/sustainability/sustainability.html#software-obsolescence">chapter 3</a>).
    </p>

    <p>
      <strong>Free Software solves this dilemma in that there cannot be a forced end of support.</strong> Instead, Free Software can be used by all people for unlimited time and space and no single entity has full control over the software. Free Software provides intergenerational equity (see <a href="#intergenerational-equity">chapter 1.2</a>) . And while even with Free Software there can be the case that a software no longer receives any further updates, this is primarily the result of underuse of the software - i.e. the mutual dwindling of user interest - and above all it cannot be enforced. Meaning if a software is no longer relevant or is superseded by better software, then interest decreases and development of Free Software may also be discontinued. And if the software is no longer used, then it no longer has users, and even though it may have security issues the impact is not important in practice.
    </p>

    <p>
      Most important, any user with enough knowledge can at any time decide to further develop and reproduce the affected software, even outside of the original authorship. The availability of Free Software thus serves sustainability in a double sense: in the preservation of the software resource itself and in the useful life span of the hardware that is dependent on or designed on this software. The latter point, the relevance of Free Software for the useful life of hardware, is further elaborated in <a href="#free-software-sustainability-and-the-use-of-natural-resources">chapter 3</a>.
    </p>



<h3 id="sustainable-use-of-the-resource-brainpower">(1.5) Sustainable use of the resource brainpower</h3>

    <p>
      Even if it becomes difficult to measure the "resource brainpower", the reuse possibilities of Free Software enable a sustainable use of this important human resource: <strong>Software development requires a lot of time and creative and intellectual work and the possibilities for further use of Free Software enable already developed and well thought-out software or software components to be reused.</strong> Developers can develop IT architectures “on the shoulders of giants” instead of reinventing the wheel over and over again.
    </p>

<h2 id="free-software-and-it-infrastructures">(2) Free Software and IT infrastructures</h2>

<h3 id="free-software-is-the-base-for-sustainable-it-infrastructures">(2.1) The impact of Free software on the sustainability of IT infrastructures</h3>

    <p>
    <strong>Software is created in dependencies, both to and with one
    another.</strong> On the one hand, there are the dependencies
    that arise when “forking” a resource, whereby “forking” means the
    separation of a parallel development branch from an existing
    software development. This can happen because with software under
    free licence any company, group or even individual people can use
    existing software code in a certain version in order to design
    and publish a parallel development, only having to use a
    different name and trademark. Debian, for example, is a
    well-known GNU/Linux distribution that serves as a base for many
    other  well-known GNU/Linux distributions. Developments in Debian
    are thus reflected in many other forks and distributions  and
    vice versa.  All these distributions are being developed in
    dependencies on each other.
    </p>


  <figure>
    <img src="https://pics.fsfe.org/uploads/big/0ea350b850be62d7b69a713e7798c18a.png"/>
    <figcaption>The picture shows an excerpt from a compiled <a href="https://de.wikipedia.org/wiki/Datei:Linux_Distribution_Timeline.svg">visualization of different GNU / Linux distributions</a> and their “forks”. (Andreas Lundqvist, Muhammad Herdiansyah, Fabio Loli / GFDL 1.3) </figcaption>
  </figure>


    <h4>Critical Interdependencies</h4>

    <p>
    It becomes even more obvious with software that is developed
    within or for use in a particular environment. For example, an
    application that is developed for a specific operating system
    usually also requires the operating system itself so that the
    application can be made to run. The operating system in turn
    needs deeper layers, for example the Kernel, to be able to
    transmit software operations to the hardware. The hardware again
    needs their particular firmwares to be able to run and
    interconnect and so on. <strong>All of these levels are
    interdependent and can only be used individually to a limited
    extent, if at all. </strong>
    </p>

    <p>
    In addition, many programs appearing as uniform are actually the
    combination of various software modules into an overall
    structure. Operating systems are classic compilations of
    individual applications, but individual applications are again
    usually compilations of smaller modules and so on. Ultimately,
    individual modules or combinations of modules are integrated in
    different environments and, due to their frequent reuse and
    application, become of fundamental importance for different IT
    architectures. For example, there are numerous browsers in
    various operating systems, but at the core of the various
    browsers there are actually only two different Javascript engines
    nowadays - apart from Mozilla Firefox and its derivates, all
    other browsers, like Chrome, Opera, Safari, and others now use
    the v8-engine for this purpose. The more software, in turn,
    builds on and on top of each other and, above all, the more often
    individual modules are reused and fewer different solution
    options are available for the individual components - the higher
    the critical dependencies and single point-of-failures in modern
    IT systems .
    </p>

  <figure>
    <img src="https://pics.fsfe.org/uploads/big/a14721ad9bfd93625ae92618fe4ca028.png"/>
    <figcaption>“Dependency” CC-BY-NC 2.5 by <a href="https://xkcd.com/2347/">XKCD</a> </figcaption>
  </figure>

 <h4>Independencies with Free Software</h4>

  <p><strong>The risk of critical dependencies and single-point-of-failures
  can be  reduced by using Free Software.</strong> Although, as stated above,
  it can also happen with Free Software that software is no longer
  developed or updated. However, this does not mean that entire IT
  architectures have to collapse.</p>

  <p>
    On the one hand, as already described, because Free Software is
  not further developed as a rule when the general interest in the
  particular software - and the usage numbers - declines. Means few
  people should be affected by a stopped development. On the other
  hand, it means it is unlikely that the original authors will stop
  developing a popular program. In particular not to follow a linear
  market logic, for example the devaluation of the current version in
  order to promote the distribution of a new version, of the
  software.
  </p>

  <p>
  However, there can be other reasons why a Free Software development
  is stopped. This is especially true for projects only consisting of
  one or few contributors. But even if there happens to be an
  unanticipated stop of a particular software development – contrary
  to proprietary software in which the discontinuation of development
  is accompanied by a great loss of knowledge - with Free Software,
  the software can  be further used and - with the appropriate
  resources and investments – even further developed by third
  parties. Not to forget, that they can at least be properly archived
  (see "Software Heritage" in<a href="conservation-and-loss-of-resources-a-question-of-reproducibility">
  chapter 1.4</a>).
  </p>

  <p>
  <strong>In contrast to proprietary software, no single entity can
  prevent the development or provision of software. In particular,
  this means that no other actor has control over the critical
  infrastructures of others.</strong> This is the condition for
  designing a sustainable IT infrastructure.
  </p>

  <p>
  As explained in <a href="#examining-the-sustainability-of-free-software"> Chapter
  1</a>, any Free Software  can be used by any actor at any time and
  for any purpose. The resource can be used unlimited in terms of
  space and time. <strong>With Free Software, dependencies on
  individual actors are drastically reduced, while the availability
  of individual modules is guaranteed and the stability of IT
  architectures is thus fundamentally consolidated.</strong> All
  three properties form the basis of sustainable digital
  infrastructures and digital sovereignty. Free software thus forms a
  basic component of sustainable IT systems.
  </p>

<h3 id="free-software-enables-sustainable-ecosystems">(2.2) Free
Software enables sustainable ecosystems</h3>

  <p>
  Because there is no single actor who can stop the development or
  spread of Free Software, popular Free Software applications often
  grow their own “ecosystems” in which all actors involved have an
  interest in maintaining this software as a common resource and
  their individual usages: The sum of the individual use cases
  generates synergies and also increases the number of uses and
  development potential of Free Software. In a simplified scheme we
  can see mutual growth of users and developers, benefiting from each
  other. Meaning that the more users a software has, the more
  installations are running and thus the more different use cases the
  software goes through. Which in turn can generate interest for many
  developers to invest into the software because the high usage
  numbers seem worth investing time and efforts into it. And the more
  developers are actually investing time into the software, the more
  features or better stability will probably be provided. Which in
  turn means again that more users get interested into the software.
  </p>

  <p>
  The same logic applies in real application environments, only the
  actors are even more differentiated than only users and developers.
  <strong>In terms of sustainability, it is crucial that all actors
  together - consciously or unconsciously - contribute to the
  sustainable preservation of the Free Software as their common
  resource.</strong>
  </p>

  <figure>
  <img src="https://pics.fsfe.org/uploads/big/5087b197a6d6e215ec23c7a68f81a65b.png"/>
    <figcaption><a href=""/></figcaption>
  </figure>

  <p>
  In this illustration we see various actors who jointly design the
  use and perhaps even the development of a software or who simply
  use the software. Classically there are the users and developers.
  In addition, however, with most software there are also a number of
  third parties who have an interest in the development of the
  software or at least in maintaining the software, for example
  companies, science, initiatives and other third parties.
  </p>

<h4>“Sustaining a resource together”</h4>

  <p>
  Let us consider the popular Free Software Wordpress as an example:
  Wordpress is a  blogging software that is also used to design
  homepages. Of course, there are users and developers of Wordpress
  who are interested in the use and further development of the
  software. In addition however, there are, for example, also
  companies that offer Wordpress support - i.e. take on installation,
  maintenance and adaptation for customers - and thus have an
  economic interest in the further development of Wordpress. Or
  scientists who, for example, want to teach a Wordpress installation
  used on the university website new methods of displaying data. In
  addition, there are third parties who are detached from the actual
  use of the software but still have an interest in the ongoing
  development and existence of the resource. For example companies
  that rent web space in the core of their business but – maybe as a
  competitive advantage –also offer fully automated Wordpress
  installations as a service and so on.
  </p>

  <p>
  All these different actors have different interests or ways of
  using the “resource Wordpress”, but what they all have in common is
  an interest in the further development of the resource and in the
  preservation of the resource. Most of these actors have invested
  time and energy in the resource and have built their
  infrastructures or business models on top of it. As explained in <a href="#free-software-is-the-base-for-sustainable-it-infrastructures">
  Chapter 2.1</a>, a loss of the resource would undermine entire IT
  infrastructures. That is why the actors all have the same interest
  that the common resource not only be preserved but even developed
  further and that external changes in the IT world can persist. In
  the example of Wordpress, this would include the development away
  from the desktop to mobile systems or from HTML 4 to HTML5.
  </p>

  <p>
  <strong>This shows that Free Software is a sustainable development
  model precisely because there is no single entity that can restrict
  it or particularly profit from it.</strong> Instead, wealth
  generated out of the resource is shared among different actors who
  can design their own developments and applications. These shared
  characteristics of the resource Free Software creates a common
  interest in the preservation of the common good and, at the same
  time, synergy effects similar to those in natural ecosystems: high
  usage figures of the resource are incentives for further
  development of the resource, which create good opportunities for
  economic use cases which in turn motivate investments into the
  resource and attracts even more users, than the high popularity
  among different users attracts interest from security researchers
  and so on.
  </p>

  <p>
  But also among competitors, Free Software is able to provide a
  sustainable common resource as we can see for example in the Linux
  kernel: The Linux kernel is an interface which translates the
  instructions of the software into machine-readable instructions to
  the hardware. In 1991, Linus Torvalds began developing the Linux
  kernel as a single person and released it as Free Software under
  the GPLv2 licence<a class="fn" href="#fn12">12</a>. Quickly, other
  developers contributed over the Internet to work together and
  create the Linux kernel. Today, the Linux kernel is arguably the
  most widely used kernel in the world. We find its application in
  almost all forms of digital devices, from routers to refrigerators
  to smartphones and laptops to supercomputers<a class="fn" href="#fn13">13</a>. This is made possible by what are now hundreds,
  thousands of programmers worldwide, each of whom continues to
  contribute to and help to further improve the Linux kernel as a
  shared resource for everyone. Among these contributors are some
  students and volunteers, but mainly employees of global IT
  companies such as Huawei, Intel, Red Hat, or Google<a class="fn" href="#fn14">14</a>. That means companies that are in competition
  with each other on the free market create a common resource in this
  case, which in turn can be exploited by all - including one’s own
  competitors - to generate capital. This is not a contradiction but
  a calculated business: Through the common resource, they avoid the
  danger that their own developments fail or become obsolete, and
  they also profit from the developments of others and do not have to
  invent or imitate every new idea again and again.Whether
  intentionally or not: all contributors create a digital
  sustainability of the common resource "software kernel" by further
  developing the Linux kernel.
  </p>

  <p>
  And regardless of the direction in which individual branches or the
  entire ecosystem around a Free Software solution develops, <strong>the
  sustainable characteristics of Free Software outlined above are
  always retained: all actors retain maximum sovereignty, they can
  scale and use the software resource as desired. There are no usage
  restrictions in terms of quantity or quality.</strong> It is precisely these
  properties that make Free Software a great foundation on which to
  build your own sustainable infrastructure. After all, even if a
  critical component is not developed further, it can be further
  developed by any actor themself.
  </p>

  <p>
  Still, the Free Software development models and its surrounding
  ecosystems are not successful without any care, that is why many
  projects put particular attention on sustainable funding,
  marketing, governance models and other economic aspects.
  <a href="#sustainoss">Sustain</a> is an initiative to bring
  together experts from various fields to discuss these aspects of
  sustainability of Free Software. They are however not connected to
  the ecological benefits of Free Software, thus not outlined in this
  short study.
  </p>

 <h2 id="free-software-sustainability-and-the-use-of-natural-resources">(3) Free Software, sustainability and the use of natural resources</h2>

   <p>
   Everything digital arises in the triangle of software, hardware
   and energy. But while software is immaterial, both hardware and
   energy require natural resources. There are meanwhile
   various starting points for reducing the need for natural
   resources in digitization. Within these, the use of Free Software
   can pay off in several dimensions, in particular, Free Software
   can directly help to increase the usage time of hardware and thus
   considerably reduce the consumption of resources in our digital
   society.
   </p>

   <figure>
  <img src="https://pics.fsfe.org/uploads/big/35ee4a8e156b4feb136e9dcb2df60315.png"/>
    <figcaption/>
  </figure>

 <h3 id="hardware-production-and-usage-times">(3.1) Extending usage times</h3>

  <p>
  A fundamental problem for the sustainable design of digitization is
  the often short usage times of hardware. These short periods of use
  are ecologically doubly stressful, in production and in disposal.
  </p>

  <p>
  <strong>The actual production and its global distribution result is
  by far the greatest amount of energy consumption of hardware and
  the CO2 footprint involved in these processes is many times that of
  its actual usage time<a class="fn" href="#fn15">15</a></strong>. In
  addition, the production of many high-tech products also requires
  the use of rare earths, the extraction of which in turn creates
  massive social problems on some continents - from inhumane
  production conditions to territorial battles.
  </p>

  <p>
  If we do not want to abstain on our current living standards and
  the further development of digitization but keep our planet
  livable, an important approach for a more sustainable use of our
  resources is necessary and doable with the increase of the usage
  time of our hardware. The longer the usage time of existing
  hardware, the less new hardware is required. Statista says in 2020
  alone there have been sold (thus also produced) <a href="https://www.statista.com/statistics/755388/global-smartphone-unit-sales-by-region/">more
  than 1.5 billion smartphones</a> and we see a similar number in the
  last 5 years. Assuming if only one third of smartphone users would
  use their devices one year longer as now, this would reduce the
  production of new smartphones already by hundreds of millions of
  smartphones yearly and thus reduce the involved energy consumption
  significantly.
  </p>

  <p>
  Not to forget that a longer usage time of hardware also helps to
  improve our environmental balance at the other end of the
  production cycle, namely in the production of electronic waste: The
  <a href="http://ewastemonitor.info/">global e-waste monitor</a>
  calculates that in 2019 alone over 50 million tons of electronic
  waste have globally been produced. Since 2014, the amount of annual
  electronic waste has increased by more than a fifth. In turn, only
  17% of this was recycled. Most of the scrap - including large parts
  of the recycling - ends up in the countries of the global south,
  where it is again thinned through under inhumane conditions and
  searched for the last usable raw materials.
  </p>

<h4 id="software-obsolescence">Software obsolescence</h4>

  <p>
  There are often numerous reasons that shorten the usage time of
  hardware, such as marketing, contract periods, trends and other
  influences. A decisive and at the same time unfortunately far too
  little illuminated reason, however, is the so-called “software
  obsolescence”: <strong>Software obsolescence occurs when the manufacturer
  of a software terminates support for a current software so that no
  further support is provided and the subsequent version at the same
  time can no longer be executed on the previous hardware.</strong> In this
  case, the manufacturer runs consumers into the dilemma of either
  buying new hardware or to live with outdated software and potential
  security problems (see also <a href="/freesoftware/sustainability/sustainability.html#planned-obsolescence">Chapter 2</a>).
  </p>

  <p>
  For many manufacturers, the planned software obsolescence is part
  of their market strategy, because it creates or enforces incentives
  of  buying new hardware. Software obsolescence enables
  manufacturers to sell new hardware products before the old hardware
  is actually depreciated<a class="fn" href="#fn16">16</a>. This
  enables and promotes ever shorter usage times of the hardware. But
  such a linear use of our resources within the boundaries of our
  planet has long since become unsustainable.
  </p>

  <p>
  <strong>Free Software can help to extend the usage time
  significantly.</strong> "Old" hardware, the software or operating
  systems of which are no longer updated by the manufacturer, so that
  they become software obsolescent, can often be given a new life
  with the use of Free Software operating systems and thus continue
  to be used. This can be, for example, laptops or workstations whose
  hardware does not run the latest Windows version and for which the
  current version is no longer supported - or smartphones whose
  manufacturers do not offer any further updates to the operating
  system. In the case of laptops and workstations, GNU / Linux
  distributions can even supply decades-old computers with complete
  operating systems - in the case of smartphones, so-called “custom
  ROMs” can be installed<a class="fn" href="#fn17">17</a>.
  </p>

  <p>
  Example Android: Most of the smartphones affected by software
  obsolescence are devices with the Android operating system from
  Google. In fairness, this is simply due to the fact that an
  estimated 75% of smartphones worldwide have Android installed. On
  the other hand, it is also attributed to the fact that  the actual
  hardware is mostly produced by third-party manufacturers and the
  operating system itself is in turn developed by Google. As a result
  of the initial sale, however, the hardware manufacturers have no
  further incentives to ensure that the phone can be used for as long
  as possible. On the contrary, you can always rely on new Android
  versions by a third party – Google – to keep producing and
  marketing new phones - instead of providing support for previous
  Android versions.
  </p>

  <p>
  But the aforementioned “custom ROMs” can be installed on the said
  smartphones. These custom ROMs are modifications and Free Software
  operating systems of the original Android operating system, which
  enable users to install "new operating systems" on "old hardware".
  This means, that in many cases at least the current operating
  version can be supplied with security updates, and sometimes
  porting to higher operating system versions may also be possible.
  The users are thus no longer at the mercy of the dilemma of
  software obsolescence described above and the lifetime of the
  respective hardware can thus be significantly increased<a class="fn" href="#fn18">18</a>.
  </p>

  <p>
  <strong>By extending the usage time of hardware and countering
  software obsolescence, Free Software can directly help save natural
  resources and, attain sustainable digitization.</strong>
  </p>

<h3 id="energy-consumption">(3.2) Reducing energy consumption</h3>

  <p>
  Research into energy consumption of software by comparing
  equivalent software in equivalent usage scenarios and their
  respective resource consumption is still in its very early stages,
  but on the other hand there are already initial approaches and
  theses. The German Environment Agency is a pioneer in this area and
  is campaigning for the introduction of a <a href="/freesoftware/sustainability/sustainability.html#blue-angel">Blue
  Angel for Resources and Energy-Efficient Software Products</a>.
  Until further results and investigations shed more light on
  specific aspects regarding energy consumption of software, for now
  only the most important theses will be formulated in this chapter.
  </p>

<h4 id="autonomy-of-use">(3.2.1) Autonomy of use</h4>

  <p>
  Autonomy of use plays a central role in various usage scenarios of
  software and is in the very core for users to have control over
  their technology<a class="fn" href="#fn19">19</a>. And since individual control over technology
  also promotes modular solutions and sufficient design-thinking, the
  user’s autonomy is increasingly recognized as the basis for a
  positive development towards a sustainable technology use.
  </p>

<h4>Open standards</h4>

  <p>
  Open Standards allow people to share all kinds of data freely and
  with perfect fidelity. They prevent lock-in and other artificial
  barriers to interoperability, and promote choice between vendors
  and technology solutions. For a more <a href="/freesoftware/standards/def.html">detailed
  definition of Open Standards</a>, see the FSFE’s web pages.
  </p>

  <p>
  The option to select and use open standards as data formats is an
  important part of the autonomy of use. <strong>Open standards make
  it possible to replace an application with another, provided that
  both can read the same open standard.</strong> Closed or
  proprietary standards, on the other hand, create a technical
  dependency of the generated and stored data towards a very specific
  application program. This creates a monopoly position that not only
  produces well-known economic problems, but also ecological
  problems: For example, when research will confirm that a certain
  program is more resource-efficient than another program - but the
  ecologically more sensible program cannot be used due to data
  incompatibility.
  </p>

  <p>
  Open standards also play an important role in the design of
  sustainable IT infrastructures (see <a href="/freesoftware/sustainability/sustainability.html#free-software-is-the-base-for-sustainable-it-infrastructures">Chapter 2.1</a>). Since
  different applications can be used to process the same data, open
  standards allow an organic development of your own infrastructure
  as well as later modifications or corrections. New applications and
  modules can be integrated into existing architectures or exchanged
  as long as they all speak the common standards, which are Open
  Standards.
  </p>

<h4 id="uninstallability-and-modularity">(3.2.2) Uninstallability and modularity</h4>

  <p>
  <strong>The ability to uninstall software is an essential feature
  of any autonomy of use of technology, but this ability is often
  withheld within proprietary systems</strong>. Much of the hardware
  and its operating systems come “inherently” with pre-installed
  software that cannot be replaced or removed<a class="fn" href="#fn20">20</a>. For many customers this is especially visible
  in the Smartphone Operating System segment.  And even if the
  specific measurements and research activities have only just
  started, it can be intuitively understood that every application -
  even if it is not used or "opened" - requires at least a small
  amount of digital resources and thus energy. For example, storage
  space on a data carrier is required for the application to be
  installed, automatic updates may be loaded, the boot process of the
  operating system might be slowed down by a fraction of a second,
  and so on: Even if the numbers and measurements that result on a
  single device appear negligible, they scale extremely quick in
  noticeable dimensions<a class="fn" href="#fn21">21</a> due to the
  ever-increasing expansion of digitization. Thus, <strong>the fact
  that software can be uninstalled and the system has been
  streamlined consequently serves not only to ensure autonomy of use,
  but also to conserve resources</strong>. Free Software gives users
  full control and, in contrast to proprietary software, usually
  enables the software to be completely uninstalled.
  </p>

  <p>
  In a very similar way, the modularity of Free Software can help to
  conserve resources and to extend hardware usage time. This is
  because lower resource consumption and hardware demands on the
  software side not only means that less energy is used, <strong>but can also be the deciding factor in whether or not I can get a program to run
  on older and possibly less powerful hardware</strong>.
  </p>

  <p>
  When using a Free Software operating system, there is basically the
  option of manually configuring, removing, replacing or even
  installing each module and program. Since Free Software can be
  shared, specially configured systems can be distributed and all
  users can benefit from this configuration. This leads to interest
  groups - so-called communities - who maintain and publish special
  GNU / Linux software configurations - so-called distributions.
  There are GNU / Linux distributions that are specially designed to
  have the lowest possible hardware requirements through the skillful
  use of only the most essential modules and thus still provide
  up-to-date software on old hardware<a class="fn" href="#fn22">22</a>. <strong>In this way, the modularity of  Free
  Software allows one to run a sufficient system, thus increasing the
  useful life of hardware.</strong>
  </p>

<h4 id="reusability">(3.2.3) Reusability</h4>

  <p>
  In <a href="/freesoftware/sustainability/sustainability.html#sustainable-use-of-the-resource-brainpower">(1.5)
  Sustainable use of the resource brainpower</a> it is argued that –
  although difficult to measure – the reuse possibilities of Free
  Software enable a sustainable use of the important human “resource
  brainpower”. In the field of Artificial Intelligence (AI) the
  concrete energy savings by reusing already trained models however
  are measurable and help us understand the sustainability of reusing
  energy in other aspects of software development.
  </p>

  <p>
  The energy consumption of the software used to train Artificial
  Intelligence model is estimated by measuring the hardware power
  consumption and converting it to CO2 emissions<a class="fn" href="#fn23">23</a>. This way it has been found that training a
  single AI model for understanding human language takes as much as
  284 tons of CO2. If AI models are not shared across, they will need
  to be trained by each stakeholder and implication, thus
  dramatically increasing CO2 emissions in this technological field.
  <strong>Sharing AI models under a Free Software licence instead allows for
  sustainable development of AI by limiting power consumption and
  therefore CO2 emissions</strong><a class="fn" href="#fn24">24</a>.
  </p>

  <p>
  Putting both aspects together – savings of human brainpower and of
  computational power by reusing software and trained AI models – it
  becomes clear how sustainable ecosystems around Free Software  (see
  <a href="/freesoftware/sustainability/sustainability.html#free-software-enables-sustainable-ecosystems">2.2</a>,) very likely are able to save countless amount of human
  energy and computational energy, both decreasing unnecessary use of
  natural resources. This is exactly what some competitiors have
  understood in developing, for example, the Linux Kernel together (see example in
  <a href="/freesoftware/sustainability/sustainability.html#free-software-enables-sustainable-ecosystems">
  2.2</a>). If state authorities would tie the development of
  intangible goods that are funded with public money to a publication
  under a free licence, our society could profit in multiple ways
  including a more sustainable use of our natural resources.
  </p>

<h2 id="what-can-politics-and-society-do-for-a-more-sustainable-digitization">(4) What can politics and society do for a more sustainable digitization?</h2>

  <p><strong>The more we research the principles of digital sustainability, the more it becomes apparent that Free Software is also sustainable software and vice versa. </strong> As shown in this study, Free Software (also called Open Source Software) contributes to digital sustainability in several dimensions:</p>

  <ul>
    <li><a href="/freesoftware/sustainability/sustainability.html#examining-the-sustainability-of-free-software">Ensuring sustainability and availability of software</a></li>
    <li><a href="/freesoftware/sustainability/sustainability.html#free-software-and-it-infrastructures">Creating independent infrastructures and sustainable ecosystems</a></li>
    <li><a href="/freesoftware/sustainability/sustainability.html#free-software-sustainability-and-the-use-of-natural-resources">Saving natural resources by extending the usage time of hardware</a></li>
    <li><a href="/freesoftware/sustainability/sustainability.html#energy-consumption">Reducing energy consumption through autonomy of use and reusability</a></li>
  </ul>

  <p><strong>It is therefore
    important that politics and society set milestones today into
    further promotion of Free Software development and thus into
    sustainable software</strong> in order to guarantee a liveable future. To let society fully benefit from the sustainability of Free Software, hardware must be developed and provided with full access and be under the  control of the individual user. To this end, devices shall be sold with operating systems that are published under a Free Software licence and without any technical limitations regarding their reuse as general purpose computers. Until we are there, however, the most urgent milestones currently are:
  </p>

  <div class="color-box rounded fullwidth" data-color="android-lime">
    <div class="fullwidth-content">
    <ul>
      <li><strong>Device Neutrality:</strong></li>
      <ul>
        <li><strong>General Purpose Computers:</strong> <a href="#general-purpose-computers">Right to use alternative operating systems and software</a></li>

        <li><strong>Access to Hardware:</strong> <a href="#access-to-hardware">Devices with open interfaces, drivers, and standards</a></li>
        <li><strong>Freedom of Choice:</strong> <a href="#freedom-of-choice">Gatekeepers must allow competing services and software</a></li>
      </ul>
      <li><strong>Upcycling of Software:</strong> <a href="#upcycling-of-software">Publication of source code under a free licence after the end of support</a></li>
      <li><strong>Public Smart Infrastructures:</strong> <a href="#public-infrastructure-public-code">Public infrastructure to be set up with Free Software and public code</a></li>
    </ul>
    </div>
  </div>

  <h3>Device Neutrality</h3>

  <p>Device Neutrality is a term that has been introduced to describe a non-discriminatory IT environment in that any service and software application is treated equally within the running operating systems, its dominant platforms and their respective hardware companies. The idea is to ensure competition, consumer protection and freedom of choice by offering a similar "neutrality" for any user, developer, company, or any other entity. For a clearer understanding of how to achieve real device neutrality, we break down the sum into three separate demands: <a href="#general-purpose-computers">General Purpose Computers</a>, <a href="#access-to-hardware">Access to Hardware</a>, and <a href="#freedom-of-choice">Freedom of choice</a>.</p>


  <h3 id="general-purpose-computers"><span class="painted">General Purpose Computers:</span> Right to use alternative operating systems and software</h3>

  <p>Today's manufacturers of linear products mostly try to prevent the installation of Free Software and alternative operating systems, although - or precisely because - this can <a href="#hardware-production-and-usage-times">clearly extend the
  usage lifetime of hardware</a> and help with a more sustainable
  use of our resources.</p>

  <p>To achieve digital sustainability, it is a political necessity to prevent short hardware lifetimes and corresponding linear business models and to enable free reuse of devices. Neither technical measures (e.g. locking the bootloader) nor legal measures (e.g. general terms and conditions and EULAs) that aim to prevent the installation of alternative operating systems may be permitted. <strong>Users must be given the right to install the operating system of their choice on their own devices, as well as any software.</strong></p>

  <p>
    In the past decades, however, politics often supported manufacturers' intentions in locking down devices and creating a linear use of hardware in that reuse or modification of the hardware is not allowed or enabled. The Digital Millennium Copyright Act is an example as is the European Information Society Directive. Both are implementations of the WIPO Copyright Treaty that introduced the illegality of any  activities aiming to upgrade or upcycle devices by any means circumventing digital restrictions management.
  </p>

  <p>
  The FSFE highlights the importance of user’s individual
  control over general purpose computing machines<a class="fn" href="#fn25">25</a>. Given the vast number of powerful general purpose computing machines - those called “Smartphones” for example  - produced and trashed every year<a class="fn" href="#fn26">26</a>, it is also <strong>of inevitable importance for a more sustainable use of our resources to give third parties and users full access to these computers</strong> and let them use their devices for continued upcycling processes<a class="fn" href="#fn27">27</a>. “Outdated” smartphones, for example, can be used for other kinds of automated processes at home, at work, or  in other surroundings. With the growing Internet of Things and ever more connected devices we must act now to ensure a more sustainable use of our resources and devices in future.
  </p>


  <h3 id="access-to-hardware" class="painted">Access to Hardware: Open interfaces, drivers, and standards</h3>

  <p>
  Although manufacturers use general purpose computers for their devices, they often try to support the marketing of their own product family and prevent users from combining products with those from competitors. This creates an artificial incompatibility of their products with the products of other manufacturers. At the hardware level, for example, many people have encountered this from the incompatibility of different charging cables - which politicians at the European  level at the time of writing are trying to address with new eco-design criteria<a class="fn" href="#fn28">28</a>.
  </p>

  <p>
    Similar incompatibilities are also played out on the software level, often involving proprietary formats such as the Microsoft Word Binary File Format <em>.doc</em> for example. <strong> Proprietary formats are introduced to prevent other software applications from accessing saved data in general and publicly available data formats defined in Open Standards.</strong>
    Apart from hindering competition and innovation, such proprietary formats are used to artificially <a href="#designing-a-resource-free-licenses-and-copyleft">simplify software solutions</a> within IT environments. And from a shortage of software solutions follows a shortage of possible hardware solutions. In particular, any data incompatibility prevents users from using the most efficient toolchain within their IT environments and possibilities of reducing energy consumption are limited.
  </p>

  <p>
    Incompatibilities worsen regarding access to hardware, where restrictions primarily happen by withholding interfaces and drivers. In contrast,  <strong>open provision of interfaces and drivers enables third-party manufacturers to combining existing hardware in a modular manner and to form complex infrastructures  under individual aspects and necessities. </strong> For example, it would be possible to combine different hardware products and compile them together with a focus on the overall efficiency or their flexibility instead of being at the mercy of the manufacturers' monocultures and product families.
  </p>

  <p>
  The possibilities of combining different hardware products and families with each other in support of a more sustainable use of hardware will become of ever more importance with further growth of the Internet of Things. With open access to interfaces and drivers, any third-party providers would be enabled to offer services such as the repair of hardware, supporting a more sustainable use and longer usage lifetime of hardware. That is why these  demands are also part of the demands for a universal <a href="#repair">“right to repair”</a>.
  </p>


  <h3 id="freedom-of-choice" class="painted">Freedom of choice: Gatekeepers must allow competing services and software</h3>

  <p>The current debates <a class="fn" href="#fn29">29</a> about device neutrality combine the two aspects of general purpose computing and access to hardware with an added obligation for non-free services and operating systems to allow installation and use of alternative services and software. This demand is particularly important for any user or third party not interested in modifying hardware or software systems but who wants to benefit from more competition and a more vibrant software market. Hardware and operating systems, but also browsers and app-stores, have become the gatekeepers of interaction between users and services. Users, developers, and third parties however shall have the freedom to access and offer information and services within these platforms and not be blocked for any competitive reason.</p>

  <p>The free choice of services would help the sustainability of our digital services and devices by opening up markets and innovation. If consumers buy, for example, a smart device and can afterwards decide to use the pre-installed - even proprietary - operating system but not the pre-installed cloud connection to its initial manufacturer but to a third-party service provider instead, this could amplify competition, users' freedom, and ecologically friendly options. It would in particular allow a more diverse usage of existing hardware and the assembling of hardware in a more modular manner as described in <a href="#access-to-hardware">access to hardware</a>. </p>

  <h3 id="upcycling-of-software">Upcycling of Software: Publication of source code under a free license after the end of support</h3>

  <p>
    As shown in this study, <strong>Free Software is a solution to overcome the problems of software obsolescence and to <a href="#hardware-production-and-usage-times">help extending hardware lifetime</a>.</strong> From smart cities to smart homes to smart phones, but also true for even not(-yet)-connected devices like washing machines, toasters, or any other machines: access to the source code of the software that is running the machine is critical for any sort of maintenance operation including repair as well as any potential reuse or upcycling process of that hardware. Without public access to the source code only the initial manufacturer and its contracted service operators can offer any kind of service. Apart from economical problems by creating monopolies, ecological problems worsen with the end of support of any such a device by the initial manufacturer. The end of support usually means the end of the lifetime of the device. Even if the hardware is still functioning, software obsolescence occurs and makes the hardware unusable.</p>



  <p>To solve this dilemma, <strong> the FSFE demands the publication of a device's underlying source code under a free licence <a class="fn" href="#fn30">30</a> at the end of support for any software necessary to run or modify the initial functioning of the device.</strong> This is because the availability of the source code would enable any third party to undertake the maintenance, extended support, or further development of the software and its device. Instead of wasting valuable hardware and resources, the publication of source code will extend usage, lifetime, and reusability, being a barrier against software obsolescence.
  </p>

      <figure>
    <img src="https://pics.fsfe.org/uploads/medium/c5/0e/34d0ef26365f03837ef3d1bfb16c.png" alt="Internet of things -&gt; End of Support -&gt; Publication of Source Code -&gt; Upcycling by third parties -&gt; Second life"/>
    <figcaption>The graphic demonstrates how the "upcycling of software" can ideally help to extend usage lifetimes and to grow aftermarkets after the end of support by the initial manufacturers.</figcaption>
  </figure>
  <p class="license">Icons reused from sources available on <a href="https://freepik.com">Freepik.com</a></p>


  <h3 id="public-infrastructure-public-code">Public Smart Infrastructures: Public infrastructure to be set up with Free Software and public code</h3>

  <p>
  As is examined in this study, <a href="#free-software-and-it-infrastructures">Free Software serves the sustainability of IT infrastructures</a>. It does so both, in the possibility of saving resources through the <a href="#uninstallability-and-modularity">use of modular systems and the deinstallation of modules</a> that are not required, as well as through controlling the software in use and allowing building architectures without software obsolescence.
  </p>

  <p>
    In today's society, IT-infrastructures power almost all
    system-critical applications, from hospitals to public
    administrations to local public transport. <strong>To benefit from sustainable eco-systems surrounding Free Software concepts, a crucial requirement is that software that runs our everyday and critical infrastructure is software published under a Free Software license</strong>. Free Software is the solution to guarantee that critical infrastructures are not under the control of proprietary software developers and their companies' market strategy<a class="fn" href="#fn31">31</a>. Similar thoughts are often addressed under the term <em>"digital sovereignty"</em>.</p>


   <p>Most of our public digital infrastructure is paid for with public funds.
    The FSFE launched the <a href="https://publiccode.eu/">“Public Money? Public Code! ”</a>
    campaign in 2017 that has since enjoyed great popularity around the world. The central message of the campaign is to create a legal basis that requires
    that <strong>software developed with public funds for public
    administrations is published under a Free Software or Open Source
    licence.</strong></p>

  <p>Once the principle of 'Public Money? Public Code!' is established, our administrations and societies would greatly benefit from sustainable infrastructures and sustainable software solutions. Software once developed could be used, customized, and shared by other administrations. <a href="#free-software-enables-sustainable-ecosystems">Sustainable ecosystems around software solutions</a> could be established.</p>

  <p><strong>If it's public money, the code should be public too!</strong>
  </p>

  <!--
  <p>
  Several administrations have meanwhile joined this demand, as well
  as  <a href="https://publiccode.eu/#organisations">over a hundred
  different civil society initiatives</a>. The FSFE wants the
  principle of “Public Money? - Public Code!” to become the guiding
  principle for the use of public funds across Europe.
  Administrations and societies in Europe and beyond would benefit
  from ecological and sustainable benefits of Free Software as
  outlined in this article as well as social and economic benefits
  outlined <a href="/freesoftware/index.html">on
  the FSFE’s web pages</a>.
  </p>

  <p>
  More background and information on how you can support this goal
  can be found at <a href="https://publiccode.eu/">publiccode.eu</a>
  </p>
 -->

<h3 id="initiatives-around-the-sustainability-of-free-software">(5) Initiatives around the sustainability of Free Software</h3>

<p>Meanwhile there are many initiatives around the sustainability of Free Software. Below a list of those that have been mentioned within this study:</p>


  <div class="icon-grid">
      <ul>
        <li>
          <img src="https://pics.fsfe.org/uploads/thumb/ddc0125b3dd3006d292f8c6facb0e12c.jpeg" alt=""/>
          <div>With an estimated 75% of all smartphones, the Android operating system is by far the most widespread smartphone operating system in the world.  If only one third of these users would extend the usage lifetime of their smartphones for one more year, we could save hundreds of millions of smartphones from being produced. A longer use of smartphones becomes be a crucial factor for a more sustainable use of our resources. “Upcycling Android” is an upcoming initiative by the Free Software Foundation Europe to extend the usage time of Android phones by installing alternative operating systems. An online campaign helps users to understand the problem and to help themselves; further help is provided in organized workshops.</div>
        </li>

        <li>
          <img id="blue-angel" src="https://pics.fsfe.org/uploads/thumb/fe70d18fbe9ea351efaef7ff022e51da.jpeg" alt=""/>
          <div>The <a href="https://www.blauer-engel.de/en/products/electric-devices/resources-and-energy-efficient-software-products">Blue Angel for resources and energy-efficient software products</a> is an initiative of various German environmental and standardisation agencies to address the energy consumption of software in interplay with its hardware. In the requirement criteria for achieving the Blue Angel, many inherent characteristics of Free Software - for example the autonomy of use listed above - play an important role. The <a href="https://invent.kde.org/joseph/be4foss">KDE e.V. runs an initiative to help Free Software projects to apply and succeed in the Blue Angel certification</a> as well as  <a href="https://invent.kde.org/cschumac/feep">supporting further research activities specifically for Free Software desktop applications</a>.</div>
        </li>
      <li>
          <img src="https://pics.fsfe.org/uploads/thumb/66b6108a007443b9b7992615b7c0d7ac.jpeg" alt=""/>
          <div>The <a href="https://digitalprinciples.org/">Principles of Digital Cooperation</a> are an agreement developed by the United Nations Foundation and meanwhile signed by numerous initiatives in the international cooperation sector. One of the nine central principles in it calls for <a href="https://digitalprinciples.org/principle/use-open-standards-open-data-open-source- and-open-innovation /">the use of open standards, open data, free software and open innovation</a>. Other principles also align very well with several aspects of Free Software and software sustainability as outlined in this study. The FSFE website provides a detailed analysis of the <a href="/freesoftware/developmentcooperation/developmentcooperation.html">potential of using Free Software for sustainable international development cooperation</a> based on these principles and the UN sustainable development goals.</div>
        </li>
    <li>
          <img id="sustainoss" src="https://pics.fsfe.org/uploads/thumb/0f0b0f35833691b12e87a575ce013bf5.jpeg" alt=""/>
          <div><a href="https://sustainoss.org/">Sustain</a> is an initiative of experts to think about the sustainability of Free Software from an organisational point of view. For example how to achieve sustainable financial independence or how to choose the best governance or funding models depending on the project's level of development, always aiming at maximising the longevity of the project. After initial spark in 2017 meanwhile there are <a href="https://sustainoss.org/working-groups/">several working groups</a> working on certain aspects regarding the sustainability of Free Software as a resource.</div>
    </li>
    <li>
          <img id="repair" src="https://pics.fsfe.org/uploads/thumb/67cee6dadc6926fe4db4a43d54ceb532.jpeg" alt=""/>
          <div>In addition to the use of Free Software, a general <a href="https://repair.eu">“right to repair”</a> is one of the basic requirements for a more sustainable digitization, in particular for the longevity of our hardware. Since software and hardware cannot be separated from each other, the debates about the right to repair include most of the core concepts of sustainable software and device neutrality as outlined in this study, in particular the <a href="#general-purpose-computers">Right to General Purpose Computing</a>, the <a href="#access-to-hardware">Access to Hardware</a>, and the <a href="#upcycling-of-software">Upcycling of Software</a>.</div>
    </li>
    <li>
          <img src="https://pics.fsfe.org/uploads/thumb/a50306d527c295631c97399347f3c9b0.jpeg" alt=""/>
          <div><a href="https://www.softwareheritage.org/">Software Heritage</a> is a non-profit supported by UNESCO, whose mission is <em>“to collect, preserve, and share all software that is publicly available in source code form”</em> in order to establish a sustainable resource of human’s knowledge in source code form. Consequently, the Software Heritage infrastructure itself is underlying a sustainable development model in that all the software developed in the process is being released as Free Software.</div>
    </li>
    <li>
          <img src="https://pics.fsfe.org/uploads/thumb/ad1a7cf659813fb35bbe0122d4b6cf81.jpeg" alt="Logo of Bits &amp; Bauml;ume"/>
          <div><a href="https://bits-und-baeume.org/en">Bits &amp; Bäume</a> has been a conference on the topic of sustainable digitization and in its aftermath has become a well-known source of information material, including the recordings of the sessions as well material that has been produced in follow-up. Inside Germany there is also a community growing with local chapters that align with the demands by the conference’s organisers. Your author of this study also gave an introductory talk at said conference about <a href="https://media.ccc.de/v/bub2018-138-digitale_rohstoffe_erhalten_sich_anders">the sustainability of digital resources (DE)</a>.</div>
    </li>
  </ul>
</div>

<p><br/><strong>Author: <a href="/about/albers/albers.html">Erik Albers</a></strong></p>

<h2 id="fn">Footnotes</h2>

    <ol>
    <li id="fn1">More about Free Software on fsfe.org: <a href="/freesoftware/">https://fsfe.org/freesoftware/</a></li>
    <li id="fn2">More about Free Software Licensing on fsfe.org: <a href="/freesoftware/legal/faq.html">https://fsfe.org/freesoftware/legal/faq.html</a></li>
    <li id="fn3">It is also known as the Brundlandt Report, published by the “United Nations' World Commission on Environment and Development” in 1987 - and named after the chairman of the commission. The original copy is <a href="https://en.wikisource.org/wiki/Brundtland_Report">available  on Wikisource</a>.</li>
    <li id="fn4">More about this logic and further thoughts on the preservation of digital raw materials, see also the recording of the Bits &amp; Trees lecture by your author Erik Albers: <a href="https://media.ccc.de/v/bub2018-138-digitale_rohstoffe_erhalten_sich_anders">Digitale Rohstoffe erhalten sich anders</a> (German)</li>
    <li id="fn5">For an introduction to the topic and the problem of digital restrictions management see <a href="https://drm.info/">https://drm.info/</a> </li>
    <li id="fn6">The FSFE understands the term "intellectual property" to be <a href="/news/2020/news-20200820-01.html">ideologically charged and dangerously oblivious</a> to the significant differences that exist between the many areas of law that it tries to subsume. That is why the author of this study speaks in turn about “Intellectual limitation rights”.</li>
    <li id="fn7">Because of the dangerous aspects of intellectual limitation rights for the sharing of software and knowledge, the FSFE did and does run multiple campaigns in order to convince decision-takers to avoid the dangerous limitation of knowledge. You find <a href="/activities/policy.html">many of them on the FSFE’s Policy Activities Page</a>.</li>
    <li id="fn8">See <a href="https://en.wikipedia.org/wiki/Intergenerational_equity">Intergenerational equity on Wikipedia</a> for further information</li>
    <li id="fn9">For more detailed information on Free Software and its licences, see <a href="/freesoftware/legal/faq.html">Frequently Asked Questions on Free Software Licensing</a></li>
    <li id="fn10">In 1998 Netscape released the source code of its browser “Netscape Navigator” and created the Mozilla Organization to coordinate future development of its product. In a first step however the newly founded Mozilla Organization rewrote the entire browser's source code to be based from this point on on the Gecko rendering engine - and published it as “Mozilla’s Firefox”</li>
    <li id="fn11">The <a href="https://gcemetery.co/">Google Cemetery</a> for example lists currently (01.06.2021) 166 software products developed by Google until the day Google decided to not further maintain them – and without offerng any release of the underlying source code or other help for users to get their data exported into other programs.</li>
    <li id="fn12">Version 2 of the GNU General Public License</li>
    <li id="fn13">Since 2017 the top 500 supercomputers in the world meanwhile all run on Linux: <a href="https://www.top500.org/">top500.org</a></li>
    <li id="fn14">For version 5.10 of the Linux kernel, employees of only said companies listed above together contributed already 28% of all code changes, see <a href="https://lwn.net/Articles/839772/">Statistics from the 5.10 kernel development cycle</a></li>
    <li id="fn15">For example, Apple calculates its carbon footprint for 2018 to be 74% of production and another 5% of global transport and only 19% of actual product use, see <a href="https://www.apple.com/environment/pdf /Apple_Environmental_Responsibility_Report_2019.pdf">Environmental Responsibility Report 2019</a> (Covering Fiscal Year 2018), page 9</li>
    <li id="fn16">This is particularly striking in the smartphone segment. Most of these devices only have a very short lifespan - around one and a half to two and a half years on average. Most of the time it is because the phones originally delivered are no longer updated by the manufacturer so that they become software obsolescent. The “Upcycling Android” campaign by the Free Software Foundation Europe starts at this point and helps users to extend the usage time of their smartphones.</li>
    <li id="fn17">See also the “Free Your Android” campaign launched by the Free Software Foundation Europe in 2013, which supports users in installing alternative operating systems on their Android smartphones in a self-determined manner.</li>
    <li id="fn18">It should be noted at this point that, in the sense of complete digital sustainability, such a use of Free Software is best paired with the modular design of hardware and the most complete repairability of the entire construction or its individual modules (for more information see also Pohl et al. (2020): <a href="https://www.oekologisches-wirtschaften.de/index.php/oew/article/view/1788/1732">Design Options for Long-lasting, Efficient and Open Hardware and Software</a>). The underlying concept of a "right to repair" has long been demanded and includes aspects such as a repair-friendly product design, access to spare parts and the receipt of the guarantee even in the case of repairs. More info on this at <a href="https://repair.eu/">repair.eu</a></li>
    <li id="fn19">Incidentally, with Free Software the maximum autonomy of use applies, as postulated in the tagline of the Free Software Foundation Europe: "empowering people to control technology"</li>
    <li id="fn20">Compare, for example, the activities of the Free Software Foundation Europe on "<a href="/activities/routers/routers.html">Router Freedom</a>" and "<a href="https://freeyourandroid.org">Free Your Android</a>". In the first case, it is about the rights of users to choose their own router and load it with an alternative operating system - in the second case, it is about the rights of users to install alternative operating systems on their smartphones.</li>
    <li id="fn21"><a href="https://media.ccc.de/v/bub2018-2-warum_unser_web_nachhaltiger_werden_muss_und_wie_wir_das_anstellen">In his Bits &amp; Bäume presentation</a>, Niklas Jordan calculates how saving only 25KB by compressing the Wikipedia logo scales within one month to the amount of energy that nine two-person households consume per year.</li>
    <li id="fn22">For more details, see the documentation of the <a href="https://www.umweltbundesamt.de/publikationen/nachhaltige-software">specialist discussion “Sustainable Software”</a> on November 28, 2014 by the Federal Environmental Agency of Germany, and in it: Erik Albers “Freie Software – Ressourcen schonen durch teilen”</li>
    <li id="fn23">Version 2 of the GNU General Public License</li>
    <li id="fn24">The Free Software Foundation Europe has made an analysis with additional benefits of Free Software for Artificial Intelligence: <a href="/freesoftware/artificial-intelligence.html">https://fsfe.org/freesoftware/artificial-intelligence.html</a></li>

    <li id="fn25">See for example <a href="/freesoftware/secure-boot.html">“"Secure Boot": Who will control your next computer?”</a></li>
    <li id="fn26">According to Statista in 2020 alone there have been sold (thus also produced) <a href="https://www.statista.com/statistics/755388/global-smartphone-unit-sales-by-region/">more than 1.5 billion smartphones</a> with similar numbers in recent years.</li>
    <li id="fn27">Although unfortunately never competed, the initial ideas surrounding Samsung’s “Galaxy Upcycling” shed pretty good light on the possibilities of reusing and upcycling Smartphones in other IT environments: <a href="https://de.ifixit.com/News/50450/samsung-galaxy-upcycling-unlocked-smartphone-smarthome-project">https://de.ifixit.com/News/50450/samsung-galaxy-upcycling-unlocked-smartphone-smarthome-project</a></li>
    <li id="fn28">See e.g. <a href="https://netzpolitik.org/2021/interne-dokumente-eu-plant-einheitliches-ladekabel-fuer-alle-handys-tablets-und-laptops/">https://netzpolitik.org/2021/interne-dokumente-eu-plant-einheitliches-ladekabel-fuer-alle-handys-tablets-und-laptops/</a></li>
    <li id="fn29">See for example the discussions surrounding Article 3(7) of the Digital Markets Act, stating a gatekeeper shall <em>"(e) refrain from technically restricting the ability of end users to switch between and subscribe to different software applications and services to be accessed using the operating system of the gatekeeper, including as regards the choice of Internet access provider for end users;"</em></li>
    <li id="fn30"> Any licence defined as a <a href="https://www.gnu.org/licenses/license-list.html">Free Software Licence by the Free Software Foundation</a> or as <a href="http://opensource.org/licenses">Open Source Licence by the Open Source Initiative</a>.</li>
    <li id="fn31">See also the developments around Huawei in 2019 and the statements published by the FSFE on this. At that time it was initially about a possible ban on Huawei hardware for the 5G network expansion and an associated debate about <a href="/news/2019/news-20190205-01.html">lack of transparency of the manufacturer code</a>. In these debates, various actors emphasized the importance of having one's own control over critical state infrastructure. Shortly afterwards, the question of control is virtually reversed when Google, under pressure from the Trump administration, denies the Chinese IT giant Huawei access to the proprietary components of the Android operating system. This severe setback for the market economy again showed for Huawei <a href="/news/2019/news-20190520-01.html">clearly how important the control over its own infrastructures</a> and components are, so not again in the future a third party can undermine their own ecosystem.</li>
  </ol>



   <p>This project is financially supported by:</p>
    <img src="https://pics.fsfe.org/uploads/big/e4f61b31daadca46e2942f69fb7da6bf.png"/>
    <img src="https://pics.fsfe.org/uploads/big/7970e2f7c9c69d4e21f00ca242a657ca.jpg"/>
    <p>The publisher is responsible for the content of this publication.</p>


  </body>
</html>
