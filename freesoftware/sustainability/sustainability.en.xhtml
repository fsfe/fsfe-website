<?xml version="1.0" encoding="UTF-8" ?>

<html>
  <version>1</version>

  <head>
    <title>On the Sustainability of Free Software</title>
  </head>
  <body class="toplevel freesoftware">
    <h1>On the Sustainability of Free Software</h1>
    <div id="introduction">
      <p>
		  This article analyses and discusses several aspects regarding the sustainability of Free Software. It is part of a series about the <a href="/freesoftware/">basics of Free Software</a>. 
      </p>

    </div>


    <h2 id="summary">Summary</h2>

    <p><strong>
     		  International development cooperation is increasingly digitised. Free Software thus is becoming an indispensable fundamental technology that guarantees legally compliant international cooperation and reuse, a technology that enables global scaling with simultaneous local adaptability. In order to tap the full potential of digital development cooperation, the FSFE demands that all software development (co-)financed by taxpayers' money be published as Free Software.
		</strong>
    </p>

    
  <div id="toc">
	  <p style="text-indent:1em; font-size:150%; padding-top:0.5em; font-weight: bold;">Table of contents</p>
	  <ul style="margin: 1em; font-weight: bold;">
		  <li><a href="#examining-the-sustainability-of-free-software">(1) Examining the Sustainability of (Free) Software</a></li>
			  <ul>
				  <li><a href="#software-as-a-resource-of-modern-societies">(1.1) Software as a resource of modern societies</a></li>
				  <li><a href="#about-the-sustainability-of-free-software">(1.2) About the sustainability of Free Software</a></li>
				  <li><a href="#designing-a-resource-free-licenses-and-copyleft">(1.3) Designing a resource: Free licenses and copyleft</a></li>
				  <li><a href="#conservation-and-loss-of-resources-a-question-of-reproducibility">(1.4) Conservation and loss of resources: a question of reproducibility</a></li>
				  <li><a href="#sustainable-use-of-the-resource-brainpower">(1.5) Sustainable use of the resource brainpower</a></li>
			  </ul>
          <li><a href="#free-software-and-it-infrastructures">(2) Free Software and IT infrastructures</a></li>
			  <ul>
				<li><a href="#free-software-is-the-base-for-sustainable-it-infrastructures">(2.1) Free software is the base for sustainable IT infrastructures</a></li>
				<li><a href="#free-software-enables-sustainable-ecosystems">(2.2) Free Software enables sustainable ecosystems</a></li>
			  </ul>
		  <li><a href="#free-software-sustainability-and-the-use-of-natural-resources">(3) Free software, sustainability and the use of natural resources</a></li>
			  <ul>
			<li><a href="#hardware-production-and-usage-times">(3.1) Hardware production and usage times</a></li>
			<li><a href="#energy-consumption">(3.2) Energy consumption</a></li>
				<ul>
					<li><a href="#autonomy-of-use">(3.2.1) Autonomy of use</a></li>
					<li><a href="#uninstallability-and-modularity">(3.2.2) Uninstallability and modularity</a></li>
					<li><a href="#reusability">(3.2.3) Reusability</a></li>
				</ul>
			</ul>
			<li><a href="#what-can-politics-and-society-do-for-a-more-sustainable-digitization">(4) What can politics and society do for a more sustainable digitization?</a></li>
				<ul>
					<li><a href="#public-money-public-code">Public Money? - Public Code!</a></li>
					<li><a href="#critical-infrastructures-only-with-free-software">Critical infrastructures only with free software</a></li>
					<li><a href="#publication-of-source-code-under-a-free-license-after-the-end-of-support">Publication of source code under a free license after the end of support</a></li>
					<li><a href="#right-to-use-alternative-operating-systems-and-software">Right to use alternative operating systems and software</a></li>
					<li><a href="#open-interfaces-drivers-and-standards">Open interfaces, drivers, and standards</a></li>
				</ul>
			<li><a href="#initiatives-around-the-sustainability-of-free-software">(5) Initiatives around the sustainability of Free Software</a></li>
				
		
      </ul>
  </div>


	<h2 id="from-free-software-to-sustainable-software">From Free Software to Sustainable Software</h2>
	

	<p>Free Software (also known as Open Source Software) is any software that grants any user the four freedoms to use, study, share and improve the software<a class="fn" href="#fn1">1</a>. These <em>“four freedoms”</em> are given by a software licence<a class="fn" href="#fn2">2</a>. Software licences define the conditions under which a programme can be used and reused. For it to be Free Software, the licence text must contain at least the full exertions of the aforementioned four freedoms without limitations. Read more about the understanding of <a href="/freesoftware/">What is Free Software</a> and how these four freedoms help support other fundamental rights like freedom of speech, freedom of press and privacy on the <a href="/">Free Software Foundation Europe’s webpages</a>.</p>

	<p>In contrast to Free Software however, sustainable software is still in need of a precise definition. This short study is intended to help with the understanding of sustainable software and sheds light on how the four freedoms of Free Software support the sustainability of and by software.</p>

	<p>The study is separated into four chapters. In chapter one (1), the most important aspects covering the preservation of software as a resource for modern societies are examined and sustainability of Software is outlined by using the United Nation’s definition of “sustainability”. In the second chapter (2) the previous findings are applied to discuss the sustainability of IT-infrastructures and Free Software ecosystems. In the third chapter (3) the impact Free Software can have on reducing our consumption of natural resources is examined, in particular the possibilities of Free Software to overcome the dilemma of software obsolescence and other means. In chapter four (4) concrete policy recommendations are given that help to foster a sustainable use of our IT infrastructure and in the final chapter five (5) we conclude with some suggestions for further readings and other initiatives in the field of digital sustainability. </p>
	

	<h3 id="#examining-the-sustainability-of-free-software">(1) Examining the Sustainability of (Free) Software</h3>

    <p>
		What is sustainability? What characterizes the sustainable consumption of a resource? And what specifically applies to a sustainable consumption of the resource software? In this chapter we elaborate how software has become a resource of modern societies (1.1) and how o preserve a contemporary software resource for the future (1.2). We briefly examine the influence of different license models (1.3) to further elaborate on of the potential of saving the last copy of a resource (1.4) and the sustainable use of a resource called brainpower (1.5)
	</p> 
     
     
	<h3 id="#software-as-a-resource-of-modern-societies">(1.1) Software as a resource of modern societies</h3>
	
    <p>
		Software has become an indispensable resource of modern societies. Whether industrial production, science, public administration, our media consumption or even our everyday communication: almost all areas are now permeated by software. A modern society without the use of software no longer seems conceivable. <strong>The existence of and access to software thus becomes a prerequisite for modern social organisation and functioning.</strong> But not only our social organization is based on software, so are our machines and our tools as well. <strong>Hardware needs software to function and vice versa.</strong> All machines and automated systems around us - whether at home, at work, or in public infrastructure - need software as an indispensable resource to do whatever they were designed to do. 
	</p>

	<p>
		Both dependencies – the one on the functioning of our machines and the one on the functioning of our social organisation - together make software indispensable for modern, networked societies.
    </p>
    
    
    <h3 id="about-the-sustainability-of-free-software">(1.2) About the sustainability of Free Software</h3>
    
    
    <p>
		The moment we recognize software as a fundamental and indispensable resource of modern societies, there also arises the realization and urgency to develop or, if necessary, consume this resource in the most sustainable way possible. After all, the stability and resilience of our current social organisation depends on this resource. But what actually characterizes the sustainable consumption of a resource? And what specifically applies to sustainable consumption of the resource software?
    </p>
    
	<blockquote>"Sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs" </blockquote>
    
    <p>
		is an often quoted definition of sustainability from the famous UN-publication <em>"Our Common Future"</em><a class="fn" href="#fn3">3</a>. With regard to natural and limited resources, a form of renunciation can be derived from this definition: present generations should moderate their consumption and draw from limited resources only to the extent that there is still enough left for future generations. 
    </p>
    
    <p>
		Software, however, is not a limited resource; <strong>software cannot be consumed in such a way that it would ever exhaust the basic quantity of the resource.</strong> If we want to preserve today's software as a resource for future generations, it is actually not necessary to practice renunciation; contrary approaches might be helpful instead. 
    </p>
    
    <h4>"Resource Software"</h4>
    
    <p>
		The “resource software” is initially unlimited: software can be installed, copied and used as often as wished without ever reducing the quantity or quality of the resource. In fact, regarding the amount of the resource, the opposite applies: If we consider a certain software, e.g. the “operating system X”, as a resource and one installation of this operating system X as amount 1 of this resource, then the overall amount of the “resource operating system X” is increased with each subsequent installation. With the second installation of the operating system X we have the basic set 2 of this software, with the third installation the basic set 3 and so on. <strong>Each further installation, each copy and each use of a specific software increases the basic set of the resource instead of decimating it.</strong> That means that instead of practicing doing without, as is the case with finite resources, a possible strategy for preserving a contemporary software resource for the future would be to use it as widely as possible – meaning to install it as frequently as possible. This is because the higher the basic set of a resource, the lower the risk of losing or exhausting the resource - so the simple conclusion<a class="fn" href="#fn4">4</a>. This method however is in contradiction to certain certain aspects of the sustainable use of hardware and energy consumption (as elaborated in chapter 3), and so a more promising method to sustain software seems the complete archiving of the resource as discussed later in this chapter (1.5). </p>

	<p>
		Still, in this simple paradigm we already see a fundamental characteristic regarding the sustainability of Free Software: <strong>Free Software can be copied, shared and reused as often as desired.</strong> 
    </p>
    
    <p>
		In contrast, this is by no means possible with proprietary software because the originally unlimited resource software artificially runs short in proprietary business models with the use of technical measures and enforced by legal regulations and policies. Such technical measures are, for example, copy limitation measurements or other forms of digital restriction management<a class="fn" href="#fn5">5</a>, usually directly implemented by their authors.  These technical measures are often accompanied and enforced by legal measures and other governmental regulations, usually intended to strengthen 20ths centuries ideas of intellectual limitation rights<a class="fn" href="#fn6">6</a> such as copyright and patent law<a class="fn" href="#fn7">7</a>. 
    </p>
    
    <h4>"Intergenerational Equity"</h4>
    
    <p>
		While proprietary software artificially tightens the resources that have become fundamentally important for the organization of our societies and withholds them from the general public and future generations, Free Software opens up and removes any artificial restrictions  to these resources. <strong>Free Software licenses guarantee unrestricted access to the resource software not only for all people, but also unlimited in terms of space and time.</strong> Because of the resource’s availability in an infinite time span, we also speak of “Intergenerational equity” which aims at an equity between people who lived in the past, who live today and who will live in the future<a class="fn" href="#fn8">8</a>. It is precisely this intergenerational equity that has found its way into the core of the environmental sustainability debate since <em>“Our Common Future”</em> because – as already quoted – <em>“sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs"</em>.
    </p>


    <h3 id="#designing-a-resource-free-licenses-and-copyleft">(1.3) Designing a resource: Free licenses and copyleft</h3>

    <p>
      From previous considerations it becomes already clear that the amount of resources - i.e. the potential for duplication - of the software resource can be consciously designed. <strong>Proprietary software is designed to let the resource run short to artificially create a market around a limited resource. Free licenses however allow the full potential of a resource to be realized and enable a sustainable distribution in the sense of intergenerational equity.</strong> The authorship of a software can thus decisively decide on the availability of the software resource by selecting and using a suitable license. 
    </p>

    <!--
			<figure>
				<img src="https://pics.fsfe.org/uploads/small/583e4bfd7d0565ef16e734467bdcab14.jpg"/>
        <figcaption>Software and other creative work is published following one of the three major concepts:  </figcaption>
			</figure>
-->
    <p>
      The world of free licenses again is divided into different subgroups of licenses, mainly into different copyleft licenses and non-protective licenses as well as publications in the “public domain”<a class="fn" href="#fn9">9</a>. 
    </p>

    <p>
      All these distinct forms of free licenses enable the publication of software using the above discussed maximum usage possibilities of the current resource in terms of its dissemination and preservation of the resource for the future. Non-protective licenses as well publications within the public domain however allow any user of such a freely licensed software to later modify it into a limited resource and proprietary software. This means that with non-protective licenses and the public domain, there is always the risk that further developments of the software will turn around and again artificially reduce the amount of software resources with the use of copyright, patent protection or other intellectual limitation rights. Leading to the corresponding software being withheld from both, current and future generations. Intergenerational equity will not anymore be achievable as a result. Meaning that <strong>only copyleft licenses guarantee that future further developments of the software can be used just as sustainable. </strong>
    </p>


    <h3 id="#conservation-and-loss-of-resources-a-question-of-reproducibility">(1.4) Conservation and loss of resources: a question of reproducibility</h3>

    <p>
      In <a href="#software-as-a-resource-of-modern-societies">chapter 1.1</a>, the widest possible distribution of software as a way of obtaining the same resource was carried out as one possible solution in a theoretical mind game. However, this approach seems very uncontrollable and unpredictable and more like a game of chance because what do all free distribution methods help if - in another theoretical mindgame - in the end all users decide to delete this particular software? Also it seems unpractical since the widespread use of software might be indeed helpful for keeping it available for the future, but it is not absolutely necessary. <strong>In fact, for the sustainable consumption of software as a resource and its future availability, today's distribution or basic amount of the resource does not play a decisive role, but rather its timeless reproducibility.</strong> Because as long as at least the basic set 1 – including its unlimited reproducibility – is retained under a free license – in the best case including its documentation, language, built-tools and corresponding hardware or emulators –, it is theoretically always possible for future generations to create and distribute any number of copies from this basic set at any time. <strong>For reproducibility, it is therefore particularly important to prevent the “loss of the last copy”. </strong>
    </p>

    <h4>"Software Heritage"</h4>

    <p>
      This is where <a href="https://www.softwareheritage.org/">"Software Heritage"</a> comes into play. And while it is not the only approach of archiving software resources, it is a very unique and complete example worth elaborating: Software Heritage is a non-profit supported by UNESCO, whose mission is “to collect, preserve, and share all software that is publicly available in source code form.” 
    </p>

    <p>
      At Software Heritage, software source code is collected in multiple ways. One of them is by automatically crawling code hosting platforms, like GitHub or GitLab, but Software Heritage also allows and <a href="https://www.softwareheritage.org/howto-archive-and-reference-your-code/">offers simple means to save code from other public version control systems</a> manually. Both ways aim to offer curated archives that keep track of the origin of software by archiving and storing the full development history including precious and structured meta-information. Also they run <a href="https://www.softwareheritage.org/swhap/">The Software Heritage Acquisition Process</a> to save legacy code stored in various version and on different physical media from the time before the emergence of code hosting platforms. 
    </p>

    <p>
      Consequently, the Software Heritage infrastructure itself is underlying a sustainable development model in that all the software developed in the process is being released as Free Software. 
    </p>

    <h4>"Loss of proprietary knowledge"</h4>

    <p>
      As argued above, a decentralized free distribution and development model of software under a free license and even more its complete archiving are promising methods to prevent the “loss of the last copy”. With proprietary software, on the other hand, the loss of the last copy is a real danger. The three most common ways of such a loss of software are 
    </p>

    <ul>
      <li>deletion of the software or loss of the data carrier </li>
      <li>Loss of knowledge of the software and access to the source code </li>
      <li>the end of the provision of software or support, “planned obsolescence“</li>
    </ul>

    <p>
      The first case - the deletion of software or the loss of the data carrier - is a real danger, but ultimately only leads to the complete loss of a resource - for example the above-mentioned operating system X - if this copy is the very last copy of the resource. This case has become extremely rare in today's distributed and networked systems and should be noted here primarily for the sake of completeness. Also provided with the note that the unrestricted sharing possibilities of Free Software virtually encourage frequent copying and thus make the case of a last existing copy even more improbable. 
    </p>

    <h4>"Losing access to the sources"</h4>

    <p>
      The second case in the list above <strong>- loss of knowledge of the software and access to the source code or the tools necessary to build the binaries from the source - is perhaps the most common and likely cause of permanent loss of software.</strong> Typically, it occurs  if the developing company behind proprietary software goes bankrupt and the software and its secret code and associated documentation that has been developed to date is not archived or published and without an orderly knowledge management system. In this way, software code that has been developed for years is often irretrievably lost because no one can read or understand the code anymore – not even the publisher since the publisher is not anymore existing. This also has an impact on any dependent software and infrastructures (compare <a href="#free-software-and-it-infrastructures">chapter 2</a>) and the failure or loss of knowledge about a single software component can undermine entire IT systems.
    </p>

    <p>
      Free software, on the other hand, does not have this problem: <strong>once published under a free license, the code is visible to everyone now and in future. And even the abrupt bankruptcy of a developing company behind it cannot lead to a complete loss of knowledge about the actual code.</strong> It is true that there might be a brief vacuum in which a software is not further developed by the original authorship. Still, any third party has the possibility to understand the code as well as to keep using it without further development or develop the software further at will. It should be noted, that it is not always economic or advisable for other reasons to further develop a software instead of (re-)writing it from scratch<a class="fn" href="#fn10">10</a>. Any such decision must be taken individually for each case but not releasing the code after bankruptcy for sure removes that possibility completely.
    </p>

    <h4>"Planned obselescence"</h4>

    <p>
      Finally, <strong>one of the most common cases is the third case from the list above: the end of the provision of software or the end of support for software.</strong> As a rule, such a linear business model is the basis of the market logic of proprietary software: the sale of new products should be promoted by devaluing current products<a class="fn" href="#fn11">11</a>. The software of a certain version (in the above example, the operating system X) is no longer supported, so that customers are forced to buy the next higher version. 
    </p>

    <p>
      This approach is problematic in many ways: First of all, users are incapacitated and instead of giving them control over their technology, they are forced to buy new versions instead of continuing to use the existing one. Since not necessarily everyone follows this approach or cannot follow, there is a security problem for those affected and who do not update to the next higher version: Bugs might be found in the now-unmaintained versions of the software and can be used by third-parties to crack into the user’s system or application to steal information or let the application misbehave.
    </p>

    <p>
      On the other hand, the forced version upgrade can lead to the devaluation of hardware that is actually still functioning. This is the case when the next version can no longer be run on the old hardware. Ultimately, users are faced with a dilemma: Either they continue to use their current and functioning hardware, but have to live with a security risk by continuing to use the old software without any further security updates. Or they are forced to buy new hardware just to use the new software upgrade. <strong>This dilemma is known as "software obsolescence"</strong> (compare also <a href="#free-software-sustainability-and-the-use-of-natural-resources">chapter 3</a>).
    </p>

    <p>
      <strong>Free Software solves this dilemma in that there cannot be a forced end of support.</strong> Instead, Free Software can be used by all people for unlimited time and space and no single entity has full control over the software. Free Software provides “Intergenerational equity (see <a href="about-the-sustainability-of-free-software">chapter 1.2</a>) . And while even with Free Software there can be the case that a software no longer receives any further updates, this is primarily the result of underuse of the software - i.e. the mutual dwindling of user interest - and above all it cannot be enforced. Meaning if a software is no longer relevant or is superseded by better software, then interest decreases and development of Free Software may also be discontinued. And if the software is no longer used, then it no longer has users, and even though it may have security issues the impact is not important in practice.
    </p>

    <p>
      Most important people can decide at any time to further develop and reproduce the affected software, even outside of the original authorship. The availability of Free Software thus serves sustainability in a double sense: in the preservation of the software resource itself and in the useful life span of the hardware that is dependent on or designed on this software. The latter point, the relevance of Free Software for the useful life of hardware, is further elaborated in <a href="free-software-sustainability-and-the-use-of-natural-resources">chapter 3</a>.
    </p>



    <h3 id="#sustainable-use-of-the-resource-brainpower">(1.5) Sustainable use of the resource brainpower</h3>

    <p>
      Even if it becomes difficult to measure the "resource brainpower", the reuse possibilities of Free Software enable a sustainable use of this important human resource: <strong>Software development requires a lot of time and creative and intellectual work and the possibilities for further use of Free Software enable already developed and well thought-out software or software components to be reused.</strong> Developers can develop IT architectures “on the shoulders of giants” instead of reinventing the wheel over and over again.
    </p>

    <h2 id="#free-software-and-it-infrastructures">(2) Free Software and IT infrastructures</h2>

    <h3 id="#free-software-is-the-base-for-sustainable-it-infrastructures">(2.1) Free software is the base for sustainable IT infrastructures</h3>

    <p>
      <strong>Software is created in dependencies, both to and with one another.</strong> On the one hand, there are the dependencies that arise when “forking” a resource, whereby “forking” means the separation of a parallel development branch from an existing software development. This can happen because with software under free license any company, group or even individual people can use existing software code in a certain version in order to design and publish a parallel development, only having to use a different name and trademark. Debian, for example, is a well-known GNU/Linux distribution that serves as a base for many other  well-known GNU/Linux distributions. Developments in Debian are thus reflected in many other forks and distributions  and vice versa.  All these distributions are being developed in dependencies on each other. 
    </p>

        
			<figure>
				<img src="https://pics.fsfe.org/uploads/small/583e4bfd7d0565ef16e734467bdcab14.jpg"/>
        <figcaption>The picture shows an excerpt from a compiled <a href="https://de.wikipedia.org/wiki/Datei:Linux_Distribution_Timeline.svg">visualization of different GNU / Linux distributions</a> and their “forks”. (Andreas Lundqvist, Muhammad Herdiansyah, Fabio Loli / GFDL 1.3) </figcaption>
			</figure>


    <h4>"Critical Interdependencies</h4>
    
    <p>
      It becomes even more obvious with software that is developed within or for use in a particular environment. For example, an application that is developed for a specific operating system usually also requires the operating system itself so that the application can be made to run. The operating system in turn needs deeper layers, for example the Kernel, to be able to transmit software operations to the hardware. The hardware again needs their particular firmwares to be able to run and interconnect and so on. <strong>All of these levels are interdependent and can only be used individually to a limited extent, if at all. </strong>
    </p>

    <p>
      In addition, many programs appearing as uniform are actually the combination of various software modules into an overall structure. Operating systems are classic compilations of individual applications, but individual applications are again usually compilations of smaller modules and so on. Ultimately, individual modules or combinations of modules are integrated in different environments and, due to their frequent reuse and application, become of fundamental importance for different IT architectures. For example, there are numerous browsers in various operating systems, but at the core of the various browsers there are actually only two different Javascript engines nowadays - apart from Mozilla Firefox and its derivates, all other browsers, like Chrome, Opera, Safari, and others now use the v8-engine for this purpose. The more software, in turn, builds on and on top of each other and, above all, the more often individual modules are reused and fewer different solution options are available for the individual components - the higher the critical dependencies and single point-of-failures in modern IT systems .
    </p>

      <figure>
				<img src="https://pics.fsfe.org/uploads/small/583e4bfd7d0565ef16e734467bdcab14.jpg"/>
        <figcaption>“Dependency” CC-BY-NC 2.5 by <a href="https://xkcd.com/2347/">XKCD</a> </figcaption>
			</figure>
    
    
  <div class="icon-grid">
      <ul>
        <li>
          <img src="https://pics.fsfe.org/uploads/big/ffd946aaf663024fa97bc8f9150b9691.png" alt="" />
          <div>
			<h3 id="sustainable-handover">Sustainable handover</h3>
			
			<p>The release of software under a Free License<a class="fn" href="#fn5">5</a> enables a sustainable business and development model even after a solution has been handed over to the partner organizations, and offers unlocking the full potential of the digital resource: Since there are no license costs, no licensing restrictions or dependencies, Free Software can be reused and scaled without limitations - locally and globally.</p>
	
		  </div>
		</li>
		  
		<li>
          <img src="https://pics.fsfe.org/uploads/big/371d8cd10f43a78fb19a368619e59b3a.png" alt="" />
          <div>	
			<h3 id="independence-ownership">Independence and ownership</h3>
			
			<p>Via its license, Free Software offers the unrestricted possibility to further develop existing code and thus to adapt software. These adaptations can be done by users themselves or as a service undertaken by third parties. This allows, for example, local service providers to take over further development, maintenance and support of the software without restrictions. Free software allows maximum independence for service providers, service recipients, and partner organizations and can thus serve to build local IT expertise.</p>
				
		  </div>
        </li>
       </ul>
   </div>
     
     
	
	<h2 id="fn">Footnotes</h2>

    <ol>
		<li id="fn1">More about Free Software on fsfe.org: <a href="/freesoftware/">https://fsfe.org/freesoftware/</a></li>
		<li id="fn2">More about Free Software Licensing on fsfe.org: <a href="/freesoftware/legal/faq.html">https://fsfe.org/freesoftware/legal/faq.en.html</a></li>
		<li id="fn3">lso known as the Brundlandt Report, published by the “United Nations' World Commission on Environment and Development” in 1987 - and named after the chairman of the commission. The original copy is <a href="https://en.wikisource.org/wiki/Brundtland_Report">available  on Wikisource</a>.</li>
		<li id="fn4">More about this logic and further thoughts on the preservation of digital raw materials, see also the recording of the Bits &amp; Trees lecture by your author Erik Albers: <a href="https://media.ccc.de/v/bub2018-138-digitale_rohstoffe_erhalten_sich_anders">Digitale Rohstoffe erhalten sich anders</a> (German)</li>
		<li id="fn5">For an introduction to the topic and the problem of digital restrictions management see <a href="https://drm.info/">https://drm.info/</a> </li>
		<li id="fn6">The FSFE understands the term "intellectual property" to be <a href="/news/2020/news-20200820-01.html">ideologically charged and dangerously oblivious</a> (to the significant differences that exist between the many areas of law that it tries to subsume. That is why the author of this article speaks in turn about “Intellectual limitation rights”.</li>
		<li id="fn7">Because of the dangerous aspects of intellectual limitation rights for the sharing of software and knowledge, the FSFE did and does run multiple campaigns in order to convince decision-takers to avoid the dangerous limitation of knowledge. You find <a href="/activities/policy.html">many of them on the FSFE’s Policy Activities Page</a>.</li>
		<li id="fn8">See <a href="https://en.wikipedia.org/wiki/Intergenerational_equity">Intergenerational equity on Wikipedia</a> for further information</li>
		<li id="fn9">For more detailed information on Free Software and its licenses, see <a href="/freesoftware/legal/faq.html">Frequently Asked Questions on Free Software Licensing</a></li>
		<li id="fn10">In 1998 Netscape released the source code of its browser “Netscape Navigator” and created the Mozilla Organization to coordinate future development of its product. In a first step however the newly founded Mozilla Organization rewrote the entire browser's source code to be based from this point on on the Gecko rendering engine - and published it as “Mozilla’s Firefox”</li>
		<li id="fn11">The <a href="https://gcemetery.co/">Google Cemetery</a> for example lists currently (01.06.2021) 166 software products developed by Google until the day Google decided to not further maintain them – and without offerng any release of the underlying source code or other help for users to get their data exported into other programs.</li>
		<li id="fn12"></li>
		<li id="fn13"></li>
		<li id="fn14"></li>
		<li id="fn15"></li>
	</ol>

  </body>
</html>
